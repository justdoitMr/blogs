"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2150],{6262:(t,i)=>{i.A=(t,i)=>{const e=t.__vccOpts||t;for(const[t,n]of i)e[t]=n;return e}},7752:(t,i,e)=>{e.r(i),e.d(i,{comp:()=>s,data:()=>r});var n=e(641);const a=[(0,n.Fv)('<h1 id="_3、redis与mysql双写一致性如何保证" tabindex="-1"><a class="header-anchor" href="#_3、redis与mysql双写一致性如何保证"><span>3、Redis与MySQL双写一致性如何保证？</span></a></h1><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181444-181355.png" alt="1646475282937" tabindex="0" loading="lazy"><figcaption>1646475282937</figcaption></figure><h3 id="什么是一致性" tabindex="-1"><a class="header-anchor" href="#什么是一致性"><span>什么是一致性</span></a></h3><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181509-305428.png" alt="1646475308142" tabindex="0" loading="lazy"><figcaption>1646475308142</figcaption></figure><p>一致性就是数据保持一致，在分布式系统中，可以理解为多个节点中数据的值是一致的。</p><ul><li><strong>强一致性</strong>：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起来往往对系统的性能影响大</li><li><strong>弱一致性</strong>：这种一致性级别约束了系统在写入成功后，不承诺立即可以读到写入的值，也不承诺多久之后数据能够达到一致，但会尽可能地保证到某个时间级别（比如秒级别）后，数据能够达到一致状态</li><li><strong>最终一致性</strong>：最终一致性是弱一致性的一个特例，系统会保证在一定时间内，能够达到一个数据一致的状态。这里之所以将最终一致性单独提出来，是因为它是弱一致性中非常推崇的一种一致性模型，也是业界在大型分布式系统的数据一致性上比较推崇的模型</li></ul><h3 id="三个经典的缓存模式" tabindex="-1"><a class="header-anchor" href="#三个经典的缓存模式"><span><strong>三个经典的缓存模式</strong></span></a></h3><p>缓存可以提升性能、缓解数据库压力，但是使用缓存也会导致数据<strong>不一致性</strong>的问题。一般我们是如何使用缓存呢？有三种经典的缓存使用模式：</p><ul><li>Cache-Aside Pattern</li><li>Read-Through/Write-through</li><li>Write-behind</li></ul><h3 id="cache-aside-pattern" tabindex="-1"><a class="header-anchor" href="#cache-aside-pattern"><span>Cache-Aside Pattern</span></a></h3><p>Cache-Aside Pattern，即<strong>旁路缓存模式</strong>，它的提出是为了尽可能地解决缓存与数据库的数据不一致问题。</p><h4 id="cache-aside读流程" tabindex="-1"><a class="header-anchor" href="#cache-aside读流程"><span>Cache-Aside读流程</span></a></h4><p><strong>Cache-Aside Pattern</strong>的读请求流程如下：</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181621-656056.png" alt="1646475380193" tabindex="0" loading="lazy"><figcaption>1646475380193</figcaption></figure><ol><li>读的时候，先读缓存，缓存命中的话，直接返回数据</li><li>缓存没有命中的话，就去读数据库，从数据库取出数据，放入缓存后，同时返回响应。</li></ol><h4 id="cache-aside-写流程" tabindex="-1"><a class="header-anchor" href="#cache-aside-写流程"><span>Cache-Aside 写流程</span></a></h4><p><strong>Cache-Aside Pattern</strong>的写请求流程如下：</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181640-253183.png" alt="1646475399729" tabindex="0" loading="lazy"><figcaption>1646475399729</figcaption></figure><p>更新的时候，先<strong>更新数据库，然后再删除缓存</strong>。</p><h3 id="操作缓存的时候-到底是删除缓存呢-还是更新缓存" tabindex="-1"><a class="header-anchor" href="#操作缓存的时候-到底是删除缓存呢-还是更新缓存"><span><strong>操作缓存的时候，到底是删除缓存呢，还是更新缓存？</strong></span></a></h3><p>日常开发中，我们一般使用的就是<strong>Cache-Aside</strong>模式。 <strong>Cache-Aside</strong>在写入请求的时候，为什么是<strong>删除缓存而不是更新缓存</strong>呢？</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181757-604340.png" alt="1646475476225" tabindex="0" loading="lazy"><figcaption>1646475476225</figcaption></figure><p>我们在操作缓存的时候，到底应该删除缓存还是更新缓存呢？我们先来看个例子：</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181826-994079.png" alt="1646475506060" tabindex="0" loading="lazy"><figcaption>1646475506060</figcaption></figure><ol><li>线程A先发起一个写操作，第一步先更新数据库</li><li>线程B再发起一个写操作，第二步更新了数据库</li><li>由于网络等原因，线程B先更新了缓存</li><li>线程A更新缓存。</li></ol><p>这时候，缓存保存的是A的数据（老数据），数据库保存的是B的数据（新数据），数据<strong>不一致</strong>了，脏数据出现啦。如果是<strong>删除缓存取代更新缓存</strong>则不会出现这个脏数据问题。</p><p><strong>更新缓存相对于删除缓存</strong>，还有两点劣势：</p><ul><li>如果你写入的缓存值，是经过复杂计算才得到的话。更新缓存频率高的话，就浪费性能啦。</li><li>在写数据库场景多，读数据场景少的情况下，数据很多时候还没被读取到，又被更新了，这也浪费了性能呢(实际上，写多的场景，用缓存也不是很划算的,哈哈)</li></ul><h3 id="双写的情况下-先操作数据库还是先操作缓存" tabindex="-1"><a class="header-anchor" href="#双写的情况下-先操作数据库还是先操作缓存"><span><strong>双写的情况下，先操作数据库还是先操作缓存？</strong></span></a></h3><p><code>Cache-Aside</code>缓存模式中，有些小伙伴还是会有疑问，在写请求过来的时候，为什么是<strong>先操作数据库呢</strong>？为什么<strong>不先操作缓存</strong>呢？</p><p>假设有A、B两个请求，请求A做更新操作，请求B做查询读取操作。</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182028-207219.png" alt="1646475627752" tabindex="0" loading="lazy"><figcaption>1646475627752</figcaption></figure><ol><li>线程A发起一个写操作，第一步del cache</li><li>此时线程B发起一个读操作，cache miss</li><li>线程B继续读DB，读出来一个老数据</li><li>然后线程B把老数据设置入cache</li><li>线程A写入DB最新的数据</li></ol><p>酱紫就有问题啦，<strong>缓存和数据库的数据不一致了。缓存保存的是老数据，数据库保存的是新数据</strong>。因此，Cache-Aside缓存模式，选择了先操作数据库而不是先操作缓存。</p><ul><li>个别小伙伴可能会问，先操作数据库再操作缓存，不一样也会导致数据不一致嘛？它俩又不是原子性操作的。这个是<strong>会的</strong>，但是这种方式，一般因为删除缓存失败等原因，才会导致脏数据，这个概率就很低。小伙伴们可以画下操作流程图，自己先分析下哈。接下来我们再来分析这种<strong>删除缓存失败</strong>的情况，<strong>如何保证一致性</strong>。</li></ul><h3 id="数据库和缓存数据保持强一致-可以嘛" tabindex="-1"><a class="header-anchor" href="#数据库和缓存数据保持强一致-可以嘛"><span><strong>数据库和缓存数据保持强一致，可以嘛？</strong></span></a></h3><p>实际上，没办法做到数据库与缓存<strong>绝对的一致性</strong>。</p><ul><li>加锁可以嘛？并发写期间加锁，任何读操作不写入缓存？</li><li>缓存及数据库封装CAS乐观锁，更新缓存时通过lua脚本？</li><li>分布式事务，3PC？TCC？</li></ul><p>其实，这是由<strong>CAP理论</strong>决定的。缓存系统适用的场景就是非强一致性的场景，它属于CAP中的AP。<strong>个人觉得，追求绝对一致性的业务场景，不适合引入缓存</strong>。</p><blockquote><p>CAP理论，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p></blockquote><p>但是，通过一些方案优化处理，是可以<strong>保证弱一致性，最终一致性</strong>的。</p><h3 id="_3种方案保证数据库与缓存的一致性" tabindex="-1"><a class="header-anchor" href="#_3种方案保证数据库与缓存的一致性"><span><strong>3种方案保证数据库与缓存的一致性</strong></span></a></h3><h4 id="缓存延时双删" tabindex="-1"><a class="header-anchor" href="#缓存延时双删"><span>缓存延时双删</span></a></h4><p>有些小伙伴可能会说，并不一定要先操作数据库呀，采用<strong>缓存延时双删</strong>策略，就可以保证数据的一致性啦。什么是延时双删呢？</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182351-101915.png" alt="1646475829708" tabindex="0" loading="lazy"><figcaption>1646475829708</figcaption></figure><ol><li>先删除缓存</li><li>再更新数据库</li><li>休眠一会（比如1秒），再次删除缓存。</li></ol><p>这个休眠一会，一般多久呢？都是1秒？</p><blockquote><p>这个休眠时间 = 读业务逻辑数据的耗时 + 几百毫秒。为了确保读请求结束，写请求可以删除读请求可能带来的缓存脏数据。</p></blockquote><p>这种方案还算可以，只有休眠那一会（比如就那1秒），可能有脏数据，一般业务也会接受的。但是如果<strong>第二次删除缓存失败</strong>呢？缓存和数据库的数据还是可能不一致，对吧？给Key设置一个自然的expire过期时间，让它自动过期怎样？那业务要接受<strong>过期时间</strong>内，数据的不一致咯？还是有其他更佳方案呢？</p><h4 id="删除缓存重试机制" tabindex="-1"><a class="header-anchor" href="#删除缓存重试机制"><span>删除缓存重试机制</span></a></h4><p>不管是<strong>延时双删</strong>还是<strong>Cache-Aside的先操作数据库再删除缓存</strong>，都可能会存在第二步的删除缓存失败，导致的数据不一致问题。可以使用这个方案优化：删除失败就多删除几次呀,保证删除缓存成功就可以了呀~ 所以可以引入<strong>删除缓存重试机制</strong></p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182457-505891.png" alt="1646475896458" tabindex="0" loading="lazy"><figcaption>1646475896458</figcaption></figure><ol><li>写请求更新数据库</li><li>缓存因为某些原因，删除失败</li><li>把删除失败的key放到消息队列</li><li>消费消息队列的消息，获取要删除的key</li><li>重试删除缓存操作</li></ol><h4 id="读取biglog异步删除缓存" tabindex="-1"><a class="header-anchor" href="#读取biglog异步删除缓存"><span>读取biglog异步删除缓存</span></a></h4><p>重试删除缓存机制还可以吧，就是会造成好多<strong>业务代码入侵</strong>。其实，还可以这样优化：通过数据库的<strong>binlog来异步淘汰key</strong>。</p><figure><img src="https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182530-707676.png" alt="1646475926313" tabindex="0" loading="lazy"><figcaption>1646475926313</figcaption></figure><p>以mysql为例吧</p><p>可以使用阿里的canal将binlog日志采集发送到MQ队列里面</p><p>然后通过ACK机制确认处理这条更新消息，删除缓存，保证数据缓存一致性</p>',59)],o={},s=(0,e(6262).A)(o,[["render",function(t,i){return(0,n.uX)(),(0,n.CE)("div",null,a)}]]),r=JSON.parse('{"path":"/interview/TechnicalInterview/act_three-Redis%E5%92%8CMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98.html","title":"3、Redis与MySQL双写一致性","lang":"zh-CN","frontmatter":{"title":"3、Redis与MySQL双写一致性","icon":"file","order":3,"author":"bugcode","date":"2020-01-01T00:00:00.000Z","category":["MYSQL","REDIS","缓存"],"tag":["mysql","缓存","redis"],"sticky":false,"star":true,"footer":"面试","copyright":"bugcode","description":"3、Redis与MySQL双写一致性如何保证？ 16464752829371646475282937 什么是一致性 16464753081421646475308142 一致性就是数据保持一致，在分布式系统中，可以理解为多个节点中数据的值是一致的。 强一致性：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/interview/TechnicalInterview/act_three-Redis%E5%92%8CMysql%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"3、Redis与MySQL双写一致性"}],["meta",{"property":"og:description","content":"3、Redis与MySQL双写一致性如何保证？ 16464752829371646475282937 什么是一致性 16464753081421646475308142 一致性就是数据保持一致，在分布式系统中，可以理解为多个节点中数据的值是一致的。 强一致性：这种一致性级别是最符合用户直觉的，它要求系统写入什么，读出来的也会是什么，用户体验好，但实现起..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181444-181355.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T05:59:23.000Z"}],["meta",{"property":"article:author","content":"bugcode"}],["meta",{"property":"article:tag","content":"mysql"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:tag","content":"redis"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T05:59:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3、Redis与MySQL双写一致性\\",\\"image\\":[\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181444-181355.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181509-305428.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181621-656056.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181640-253183.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181757-604340.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181826-994079.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182028-207219.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182351-101915.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182457-505891.png\\",\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/182530-707676.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T05:59:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bugcode\\"}]}"]]},"headers":[{"level":3,"title":"什么是一致性","slug":"什么是一致性","link":"#什么是一致性","children":[]},{"level":3,"title":"三个经典的缓存模式","slug":"三个经典的缓存模式","link":"#三个经典的缓存模式","children":[]},{"level":3,"title":"Cache-Aside Pattern","slug":"cache-aside-pattern","link":"#cache-aside-pattern","children":[]},{"level":3,"title":"操作缓存的时候，到底是删除缓存呢，还是更新缓存？","slug":"操作缓存的时候-到底是删除缓存呢-还是更新缓存","link":"#操作缓存的时候-到底是删除缓存呢-还是更新缓存","children":[]},{"level":3,"title":"双写的情况下，先操作数据库还是先操作缓存？","slug":"双写的情况下-先操作数据库还是先操作缓存","link":"#双写的情况下-先操作数据库还是先操作缓存","children":[]},{"level":3,"title":"数据库和缓存数据保持强一致，可以嘛？","slug":"数据库和缓存数据保持强一致-可以嘛","link":"#数据库和缓存数据保持强一致-可以嘛","children":[]},{"level":3,"title":"3种方案保证数据库与缓存的一致性","slug":"_3种方案保证数据库与缓存的一致性","link":"#_3种方案保证数据库与缓存的一致性","children":[]}],"git":{"createdTime":1723448644000,"updatedTime":1729663163000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":1}]},"readingTime":{"minutes":7.37,"words":2211},"filePathRelative":"interview/TechnicalInterview/act_three-Redis和Mysql双写一致性问题.md","localizedDate":"2020年1月1日","excerpt":"\\n<figure><img src=\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181444-181355.png\\" alt=\\"1646475282937\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1646475282937</figcaption></figure>\\n<h3>什么是一致性</h3>\\n<figure><img src=\\"https://tprzfbucket.oss-cn-beijing.aliyuncs.com/hadoop/202203/05/181509-305428.png\\" alt=\\"1646475308142\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1646475308142</figcaption></figure>","autoDesc":true}')}}]);