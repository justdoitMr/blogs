"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7985],{6262:(n,i)=>{i.A=(n,i)=>{const s=n.__vccOpts||n;for(const[n,a]of i)s[n]=a;return s}},8574:(n,i,s)=>{s.r(i),s.d(i,{comp:()=>p,data:()=>r});var a=s(641);const e=[(0,a.Fv)('<h1 id="_1、spring生态圈" tabindex="-1"><a class="header-anchor" href="#_1、spring生态圈"><span>1、Spring生态圈</span></a></h1><h2 id="_1-1、spring的能力" tabindex="-1"><a class="header-anchor" href="#_1-1、spring的能力"><span>1.1、Spring的能力</span></a></h2><p>官网地址</p><p><a href="https://spring.io/" target="_blank" rel="noopener noreferrer">https://spring.io/</a></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>微服务</span></span>\n<span class="line"><span>一个项目进行拆分成单个小服务。</span></span>\n<span class="line"><span>springboot基于spring framework，简化了spring framework的复杂配置。</span></span>\n<span class="line"><span>可以整合spring生态中的其它技术栈，免于写复杂的配置。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>响应式编程</span></span>\n<span class="line"><span>基于异步非阻塞的方式，通过应用之间构建异步数据流的方式，异步数据流允许我们只用少量的线程资源，</span></span>\n<span class="line"><span>构建高吞吐量的应用。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式云</span></span>\n<span class="line"><span>项目拆分成微服务后，变成分布式应用。spring cloud用于解决这种情况。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>WEB项目开发</span></span>\n<span class="line"><span>例如springmvc开发web项目。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>无服务开发，</span></span>\n<span class="line"><span>FaaS，Function as a Service，&quot;功能即服务&quot;（也译作“函数即服务”）无需购买服务器，直接将服务</span></span>\n<span class="line"><span>上传到云平台，动态分配资源，</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>事件驱动</span></span>\n<span class="line"><span>spring可将整个分布式系统构建出，一个基于事件方式的实时数据流。通过该数据流，就能通过响应式的方式</span></span>\n<span class="line"><span>，占用少量的资源实现高吞吐量的业务需求。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>批处理。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2、spring的能力" tabindex="-1"><a class="header-anchor" href="#_1-2、spring的能力"><span>1.2、spring的能力</span></a></h2><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211031623.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-3、spring生态" tabindex="-1"><a class="header-anchor" href="#_1-3、spring生态"><span>1.3、Spring生态</span></a></h2><p>spring宏观上，指的是整个spring生态圈。微观上，指的是spring framework 框架。</p><p>覆盖了：</p><ul><li>web开发</li><li>数据访问</li><li>安全控制</li><li>分布式</li><li>消息服务</li><li>移动开发</li><li>批处理</li></ul><h2 id="_1-4、spring5重大升级" tabindex="-1"><a class="header-anchor" href="#_1-4、spring5重大升级"><span>1.4、Spring5重大升级</span></a></h2><p>spring5指的是整个5版本的spring生态。</p><p>因为spring framework5的重大升级（异步响应式编程），所以导致了springboot 1 和 2 版本的使用方式发生了变化。</p><h3 id="_1-4-1、响应式编程" tabindex="-1"><a class="header-anchor" href="#_1-4-1、响应式编程"><span>1.4.1、响应式编程</span></a></h3><p>springboot2，对比传统的servlet技术栈，新增了**响应式编程（Reactive stack）**的技术栈。从底层数据访问层、WEB视图层交互、安全....各个方面推出了一系列的响应式解决方案(异步响应)。使用少量的资源就能实现高并发高吞吐量的业务。</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211030169.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>servlet是spring最原生的技术栈，即spring+springmvc</li><li>Reactive stack:响应式技术栈，从数据访问到web开发，安全开发，都使用的是异步响应式开发，少量的线程，占少量的资源，就可以处理大量的并发任务。</li></ul><h3 id="_1-4-2、内部源码设计" tabindex="-1"><a class="header-anchor" href="#_1-4-2、内部源码设计"><span>1.4.2、<strong>内部源码设计</strong></span></a></h3><ol><li>spring5源码是基于Java8实现。</li><li>java8中有一些新特性，例如：接口的默认实现。假设接口A中有5个方法，实现类B只想用其中的1个方法，却要将其余4个方法全部实现为空方法。</li><li>Java8之前，spring底层会使用适配器模式：通过一个适配器类将A的方法全部实现为空方法，B继承适配器后，只用重写其中的指定方法即可。Java8出来后，Java支持<strong>接口的默认实现</strong>，适配器失去了使用价值。所以，因为Java8的新特性，Spring5内部源码也有了大量变化。</li></ol><h2 id="_1-5、为什么使用springboot" tabindex="-1"><a class="header-anchor" href="#_1-5、为什么使用springboot"><span>1.5、为什么使用SpringBoot</span></a></h2><ol><li>能快速创建出生产级别的Spring应用，简化配置。</li><li>SpringBoot本身是作为整合其它Spring生态技术栈的一个框架。</li><li>SpringBoot是整合Spring技术栈的一站式框架</li><li>SpringBoot是简化Spring技术栈的快速开发脚手架</li></ol><h2 id="_1-6、springboot的优点" tabindex="-1"><a class="header-anchor" href="#_1-6、springboot的优点"><span>1.6、SpringBoot的优点</span></a></h2><ul><li>Create stand-alone Spring applications <ul><li>创建独立Spring应用，原生的spring需要写很多配置应用。</li></ul></li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) <ul><li>内嵌web服务器（服务器不用部署Tomcat/Jetty ，打包完成直接运行），springmvc程序需要打成war包，然后部署到tomcat服务器上，目标环境需要安装配置tomcat服务器。</li></ul></li><li>Provide opinionated &#39;starter&#39; dependencies to simplify your build configuration <ul><li>自动starter依赖，简化构建配置（只需要导入对应模块的starter启动器依赖，该模块的所有对应版本的依赖自动导入），starter叫做启动器。</li></ul></li><li>Automatically configure Spring and 3rd party libraries whenever possible <ul><li>自动配置Spring以及第三方功能（自动设置好框架的默认配置，自定义少量配置即可）</li></ul></li><li>Provide production-ready features such as metrics, health checks, and externalized configuration <ul><li>提供生产级别的监控、健康检查及外部化配置</li></ul></li><li>Absolutely no code generation and no requirement for XML configuration <ul><li>无额外代码生成、无需编写XML（使用时不会生成额外代码，也不用像spring framework那样做大量配置）</li></ul></li></ul><h2 id="_1-7、springboot缺点" tabindex="-1"><a class="header-anchor" href="#_1-7、springboot缺点"><span>1.7、SpringBoot缺点</span></a></h2><ul><li>人称版本帝，迭代快，需要时刻关注变化</li><li>封装太深，内部原理复杂，不容易精通</li></ul><h2 id="_1-8、微服务" tabindex="-1"><a class="header-anchor" href="#_1-8、微服务"><span>1.8、微服务</span></a></h2><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h2 id="_1-9、分布式的困难" tabindex="-1"><a class="header-anchor" href="#_1-9、分布式的困难"><span>1.9、分布式的困难</span></a></h2><blockquote><p>由于微服务的产生，会导致软件向分布式发展。</p></blockquote><ul><li>远程调用，服务和服务之间相互调用通信。</li><li>服务发现 （A业务节点调B业务集群，需要知道B业务集群中哪些节点是存活可用）</li><li>负载均衡，前端的请求需要均衡的发送到各个微服务模块。</li><li>服务容错 （A业务节点调B业务集群，如果目标节点网络不通，是否转移请求至集群中另外一台机器？如果集群节点都不通该返回什么错误提示？等等...）</li><li>配置管理 （A业务集群节点的配置发生改变，不可能每个节点单独改，需要在一个地方做统一配置管理。）</li><li>服务监控：监控分布式集群上得到各个服务。</li><li>链路追踪 （A-&gt;B-&gt;C-&gt;D，如果整个调用链路失败，需要知道是哪个环节出现了什么问题。）</li><li>日志管理</li><li>任务调度</li></ul><h2 id="_1-10、分布式解决" tabindex="-1"><a class="header-anchor" href="#_1-10、分布式解决"><span>1.10、分布式解决</span></a></h2><p>SpringBoot + SpringCloud</p><ul><li>springboot，负责快速构建应用，</li><li>springcloud，管理网状的众多的微服务模块，</li><li>springcloud dataflow ，通过响应式的方式，管理网状微服务之间的数据流。</li></ul><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211033610.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-11、云原生" tabindex="-1"><a class="header-anchor" href="#_1-11、云原生"><span>1.11、云原生</span></a></h2><p>Cloud Native概念：开发好的原生应用，如何部署到云。</p><h2 id="_1-12、上云面临的困难" tabindex="-1"><a class="header-anchor" href="#_1-12、上云面临的困难"><span>1.12、上云面临的困难</span></a></h2><p>比较偏向于运维层面。</p><ul><li>服务自愈 （目标节点挂掉，能否拉起一台新的节点作为替代）</li><li>弹性伸缩 （使用高峰，集群资源不够时，自动按需扩充节点；高峰过去后，自动下线扩充节点）</li><li>服务隔离 （物理机上的部分服务出现故障时，不会影响同台物理机上的其它服务运行）</li><li>自动化部署</li><li>灰度发布 （假设A业务有新版本要发布，如果全部替换，可能出现故障。可以只在A业务集群的部分节点试点发布，新老版代码并存，经过验证无问题后，再逐步将剩余节点进行新版本发布。）</li><li>流量治理 （根据节点的性能高低，控制节点的流量接收量；流量进出的监控；根据集群整体流量动态扩松容。）</li><li>......</li></ul><h2 id="_1-13、查看版本更新点说明" tabindex="-1"><a class="header-anchor" href="#_1-13、查看版本更新点说明"><span>1.13、查看版本更新点说明</span></a></h2><p>查看版本新特性；</p><p><a href="https://github.com/spring-projects/spring-boot/wiki#release-notes" target="_blank" rel="noopener noreferrer">https://github.com/spring-projects/spring-boot/wiki#release-notes</a></p>',43)],l={},p=(0,s(6262).A)(l,[["render",function(n,i){return(0,a.uX)(),(0,a.CE)("div",null,e)}]]),r=JSON.parse('{"path":"/SpringPrinciple/springboot/act_one_springIntroduction.html","title":"1、Spring生态圈","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-06-04T00:00:00.000Z","category":"Spring -","tag":["Spring","jAVA"],"description":"1、Spring生态圈 1.1、Spring的能力 官网地址 https://spring.io/ 1.2、spring的能力 1.3、Spring生态 spring宏观上，指的是整个spring生态圈。微观上，指的是spring framework 框架。 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 1.4、Spri...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/SpringPrinciple/springboot/act_one_springIntroduction.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"1、Spring生态圈"}],["meta",{"property":"og:description","content":"1、Spring生态圈 1.1、Spring的能力 官网地址 https://spring.io/ 1.2、spring的能力 1.3、Spring生态 spring宏观上，指的是整个spring生态圈。微观上，指的是spring framework 框架。 覆盖了： web开发 数据访问 安全控制 分布式 消息服务 移动开发 批处理 1.4、Spri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211031623.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T03:15:29.000Z"}],["meta",{"property":"article:author","content":"Mr.bugcode"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"jAVA"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T03:15:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1、Spring生态圈\\",\\"image\\":[\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211031623.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211030169.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406211033610.png\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T03:15:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.bugcode\\",\\"url\\":\\"intro.md\\"}]}"]]},"headers":[{"level":2,"title":"1.1、Spring的能力","slug":"_1-1、spring的能力","link":"#_1-1、spring的能力","children":[]},{"level":2,"title":"1.2、spring的能力","slug":"_1-2、spring的能力","link":"#_1-2、spring的能力","children":[]},{"level":2,"title":"1.3、Spring生态","slug":"_1-3、spring生态","link":"#_1-3、spring生态","children":[]},{"level":2,"title":"1.4、Spring5重大升级","slug":"_1-4、spring5重大升级","link":"#_1-4、spring5重大升级","children":[{"level":3,"title":"1.4.1、响应式编程","slug":"_1-4-1、响应式编程","link":"#_1-4-1、响应式编程","children":[]},{"level":3,"title":"1.4.2、内部源码设计","slug":"_1-4-2、内部源码设计","link":"#_1-4-2、内部源码设计","children":[]}]},{"level":2,"title":"1.5、为什么使用SpringBoot","slug":"_1-5、为什么使用springboot","link":"#_1-5、为什么使用springboot","children":[]},{"level":2,"title":"1.6、SpringBoot的优点","slug":"_1-6、springboot的优点","link":"#_1-6、springboot的优点","children":[]},{"level":2,"title":"1.7、SpringBoot缺点","slug":"_1-7、springboot缺点","link":"#_1-7、springboot缺点","children":[]},{"level":2,"title":"1.8、微服务","slug":"_1-8、微服务","link":"#_1-8、微服务","children":[]},{"level":2,"title":"1.9、分布式的困难","slug":"_1-9、分布式的困难","link":"#_1-9、分布式的困难","children":[]},{"level":2,"title":"1.10、分布式解决","slug":"_1-10、分布式解决","link":"#_1-10、分布式解决","children":[]},{"level":2,"title":"1.11、云原生","slug":"_1-11、云原生","link":"#_1-11、云原生","children":[]},{"level":2,"title":"1.12、上云面临的困难","slug":"_1-12、上云面临的困难","link":"#_1-12、上云面临的困难","children":[]},{"level":2,"title":"1.13、查看版本更新点说明","slug":"_1-13、查看版本更新点说明","link":"#_1-13、查看版本更新点说明","children":[]}],"git":{"createdTime":1718939729000,"updatedTime":1718939729000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":1}]},"readingTime":{"minutes":6.23,"words":1869},"filePathRelative":"SpringPrinciple/springboot/act_one_springIntroduction.md","localizedDate":"2024年6月4日","excerpt":"\\n<h2>1.1、Spring的能力</h2>\\n<p>官网地址</p>\\n<p><a href=\\"https://spring.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://spring.io/</a></p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"text\\" data-title=\\"text\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>微服务</span></span>\\n<span class=\\"line\\"><span>一个项目进行拆分成单个小服务。</span></span>\\n<span class=\\"line\\"><span>springboot基于spring framework，简化了spring framework的复杂配置。</span></span>\\n<span class=\\"line\\"><span>可以整合spring生态中的其它技术栈，免于写复杂的配置。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>响应式编程</span></span>\\n<span class=\\"line\\"><span>基于异步非阻塞的方式，通过应用之间构建异步数据流的方式，异步数据流允许我们只用少量的线程资源，</span></span>\\n<span class=\\"line\\"><span>构建高吞吐量的应用。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>分布式云</span></span>\\n<span class=\\"line\\"><span>项目拆分成微服务后，变成分布式应用。spring cloud用于解决这种情况。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>WEB项目开发</span></span>\\n<span class=\\"line\\"><span>例如springmvc开发web项目。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>无服务开发，</span></span>\\n<span class=\\"line\\"><span>FaaS，Function as a Service，\\"功能即服务\\"（也译作“函数即服务”）无需购买服务器，直接将服务</span></span>\\n<span class=\\"line\\"><span>上传到云平台，动态分配资源，</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>事件驱动</span></span>\\n<span class=\\"line\\"><span>spring可将整个分布式系统构建出，一个基于事件方式的实时数据流。通过该数据流，就能通过响应式的方式</span></span>\\n<span class=\\"line\\"><span>，占用少量的资源实现高吞吐量的业务需求。</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>批处理。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);