"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8981],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},6272:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>p,data:()=>t});var e=a(641);const i=[(0,e.Fv)('<h1 id="_4、spring-transaction" tabindex="-1"><a class="header-anchor" href="#_4、spring-transaction"><span>4、Spring Transaction</span></a></h1><h2 id="_4-1、jdbctemplate" tabindex="-1"><a class="header-anchor" href="#_4-1、jdbctemplate"><span><strong>4.1、JdbcTemplate</strong></span></a></h2><h3 id="_4-1-1、简介" tabindex="-1"><a class="header-anchor" href="#_4-1-1、简介"><span><strong>4.1.1、简介</strong></span></a></h3><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><h3 id="_4-1-2、准备工作" tabindex="-1"><a class="header-anchor" href="#_4-1-2、准备工作"><span><strong>4.1.2、准备工作</strong></span></a></h3><h3 id="_1加入依赖" tabindex="-1"><a class="header-anchor" href="#_1加入依赖"><span><strong>①加入依赖</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;dependencies&gt;</span></span>\n<span class="line"><span>     &lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 持久化层支持jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 测试相关 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- junit测试 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;4.12&lt;/version&gt;</span></span>\n<span class="line"><span>         &lt;scope&gt;test&lt;/scope&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- MySQL驱动 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;8.0.16&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- 数据源 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;1.0.31&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span> &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2创建jdbc-properties" tabindex="-1"><a class="header-anchor" href="#_2创建jdbc-properties"><span><strong>②创建jdbc.properties</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> jdbc.user=root</span></span>\n<span class="line"><span> jdbc.password=atguigu</span></span>\n<span class="line"><span> jdbc.url=jdbc:mysql://localhost:3306/ssm</span></span>\n<span class="line"><span> jdbc.driver=com.mysql.cj.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3配置spring的配置文件" tabindex="-1"><a class="header-anchor" href="#_3配置spring的配置文件"><span><strong>③配置Spring的配置文件</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;!-- 导入外部属性文件 --&gt;</span></span>\n<span class="line"><span> &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot; /&gt;</span></span>\n<span class="line"><span> &lt;!-- 配置数据源 --&gt;</span></span>\n<span class="line"><span> &lt;bean id=&quot;druidDataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;url&quot; value=&quot;${atguigu.url}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;driverClassName&quot; value=&quot;${atguigu.driver}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;username&quot; value=&quot;${atguigu.username}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;password&quot; value=&quot;${atguigu.password}&quot;/&gt;</span></span>\n<span class="line"><span> &lt;/bean&gt;</span></span>\n<span class="line"><span> &lt;!-- 配置 JdbcTemplate --&gt;</span></span>\n<span class="line"><span> &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span></span>\n<span class="line"><span>     &lt;!-- 装配数据源 --&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;dataSource&quot; ref=&quot;druidDataSource&quot;/&gt;</span></span>\n<span class="line"><span> &lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-3、测试" tabindex="-1"><a class="header-anchor" href="#_4-1-3、测试"><span><strong>4.1.3、测试</strong></span></a></h3><h3 id="_1在测试类装配-jdbctemplate" tabindex="-1"><a class="header-anchor" href="#_1在测试类装配-jdbctemplate"><span><strong>①在测试类装配 JdbcTemplate</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @RunWith(SpringJUnit4ClassRunner.class)</span></span>\n<span class="line"><span> @ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span>\n<span class="line"><span> public class JDBCTemplateTest {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private JdbcTemplate jdbcTemplate;</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2测试增删改功能" tabindex="-1"><a class="header-anchor" href="#_2测试增删改功能"><span><strong>②测试增删改功能</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Test</span></span>\n<span class="line"><span> //测试增删改功能</span></span>\n<span class="line"><span> public void testUpdate(){</span></span>\n<span class="line"><span>     String sql = &quot;insert into t_emp values(null,?,?,?)&quot;;</span></span>\n<span class="line"><span>     int result = jdbcTemplate.update(sql, &quot;张三&quot;, 23, &quot;男&quot;);</span></span>\n<span class="line"><span>     System.out.println(result);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3查询一条数据为实体类对象" tabindex="-1"><a class="header-anchor" href="#_3查询一条数据为实体类对象"><span><strong>③查询一条数据为实体类对象</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Test</span></span>\n<span class="line"><span> //查询一条数据为一个实体类对象</span></span>\n<span class="line"><span> public void testSelectEmpById(){</span></span>\n<span class="line"><span>     String sql = &quot;select * from t_emp where id = ?&quot;;</span></span>\n<span class="line"><span>     Emp emp = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;&gt;(Emp.class), 1);</span></span>\n<span class="line"><span>     System.out.println(emp);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4查询多条数据为一个list集合" tabindex="-1"><a class="header-anchor" href="#_4查询多条数据为一个list集合"><span><strong>④查询多条数据为一个list集合</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Test</span></span>\n<span class="line"><span> //查询多条数据为一个list集合</span></span>\n<span class="line"><span> public void testSelectList(){</span></span>\n<span class="line"><span>     String sql = &quot;select * from t_emp&quot;;</span></span>\n<span class="line"><span>     List&lt;Emp&gt; list = jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;&gt;(Emp.class));</span></span>\n<span class="line"><span>     list.forEach(emp -&gt; System.out.println(emp));</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5查询单行单列的值" tabindex="-1"><a class="header-anchor" href="#_5查询单行单列的值"><span><strong>⑤查询单行单列的值</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Test</span></span>\n<span class="line"><span> //查询单行单列的值</span></span>\n<span class="line"><span> public void selectCount(){</span></span>\n<span class="line"><span>     String sql = &quot;select count(id) from t_emp&quot;;</span></span>\n<span class="line"><span>     Integer count = jdbcTemplate.queryForObject(sql, Integer.class);</span></span>\n<span class="line"><span>     System.out.println(count);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-2、声明式事务概念" tabindex="-1"><a class="header-anchor" href="#_4-2、声明式事务概念"><span><strong>4.2、声明式事务概念</strong></span></a></h2><h3 id="_4-2-1、编程式事务" tabindex="-1"><a class="header-anchor" href="#_4-2-1、编程式事务"><span><strong>4.2.1、编程式事务</strong></span></a></h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> Connection conn = ...;</span></span>\n<span class="line"><span> try {</span></span>\n<span class="line"><span>     // 开启事务：关闭事务的自动提交</span></span>\n<span class="line"><span>     conn.setAutoCommit(false);</span></span>\n<span class="line"><span>     // 核心操作</span></span>\n<span class="line"><span>     // 提交事务</span></span>\n<span class="line"><span>     conn.commit();</span></span>\n<span class="line"><span> }catch(Exception e){</span></span>\n<span class="line"><span>     // 回滚事务</span></span>\n<span class="line"><span>     conn.rollBack();</span></span>\n<span class="line"><span> }finally{</span></span>\n<span class="line"><span>     // 释放数据库连接</span></span>\n<span class="line"><span>     conn.close();</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h3 id="_4-2-2、声明式事务" tabindex="-1"><a class="header-anchor" href="#_4-2-2、声明式事务"><span><strong>4.2.2、声明式事务</strong></span></a></h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性</li></ul><p>能等各个方面的优化</p><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h2 id="_4-3、基于注解的声明式事务" tabindex="-1"><a class="header-anchor" href="#_4-3、基于注解的声明式事务"><span><strong>4.3、基于注解的声明式事务</strong></span></a></h2><h3 id="_4-3-1、准备工作" tabindex="-1"><a class="header-anchor" href="#_4-3-1、准备工作"><span><strong>4.3.1、准备工作</strong></span></a></h3><h3 id="_1加入依赖-1" tabindex="-1"><a class="header-anchor" href="#_1加入依赖-1"><span><strong>①加入依赖</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;dependencies&gt;</span></span>\n<span class="line"><span>     &lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 持久化层支持jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 测试相关 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- junit测试 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;4.12&lt;/version&gt;</span></span>\n<span class="line"><span>         &lt;scope&gt;test&lt;/scope&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- MySQL驱动 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;8.0.16&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- 数据源 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;1.0.31&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span> &lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2创建jdbc-properties-1" tabindex="-1"><a class="header-anchor" href="#_2创建jdbc-properties-1"><span><strong>②创建jdbc.properties</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> jdbc.user=root</span></span>\n<span class="line"><span> jdbc.password=atguigu</span></span>\n<span class="line"><span> jdbc.url=jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span>\n<span class="line"><span> jdbc.driver=com.mysql.cj.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3配置spring的配置文件-1" tabindex="-1"><a class="header-anchor" href="#_3配置spring的配置文件-1"><span><strong>③配置Spring的配置文件</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;!--扫描组件--&gt;</span></span>\n<span class="line"><span> &lt;context:component-scan base-package=&quot;com.atguigu.spring.tx.annotation&quot;&gt;</span></span>\n<span class="line"><span> &lt;/context:component-scan&gt;</span></span>\n<span class="line"><span> &lt;!-- 导入外部属性文件 --&gt;</span></span>\n<span class="line"><span> &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot; /&gt;</span></span>\n<span class="line"><span> &lt;!-- 配置数据源 --&gt;</span></span>\n<span class="line"><span> &lt;bean id=&quot;druidDataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot;&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;</span></span>\n<span class="line"><span> &lt;/bean&gt;</span></span>\n<span class="line"><span> &lt;!-- 配置 JdbcTemplate --&gt;</span></span>\n<span class="line"><span> &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span></span>\n<span class="line"><span>     &lt;!-- 装配数据源 --&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;dataSource&quot; ref=&quot;druidDataSource&quot;/&gt;</span></span>\n<span class="line"><span> &lt;/bean&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4创建表" tabindex="-1"><a class="header-anchor" href="#_4创建表"><span><strong>④创建表</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> CREATE TABLE `t_book` (</span></span>\n<span class="line"><span>     `book_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span></span>\n<span class="line"><span>     `book_name` varchar(20) DEFAULT NULL COMMENT &#39;图书名称&#39;,</span></span>\n<span class="line"><span>     `price` int(11) DEFAULT NULL COMMENT &#39;价格&#39;,</span></span>\n<span class="line"><span>     `stock` int(10) unsigned DEFAULT NULL COMMENT &#39;库存（无符号）&#39;,</span></span>\n<span class="line"><span>     PRIMARY KEY (`book_id`)</span></span>\n<span class="line"><span> ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span></span>\n<span class="line"><span> insert into `t_book`(`book_id`,`book_name`,`price`,`stock`) values (1,&#39;斗破苍穹&#39;,80,100),(2,&#39;斗罗大陆&#39;,50,100);</span></span>\n<span class="line"><span> CREATE TABLE `t_user` (</span></span>\n<span class="line"><span>     `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span></span>\n<span class="line"><span>     `username` varchar(20) DEFAULT NULL COMMENT &#39;用户名&#39;,</span></span>\n<span class="line"><span>     `balance` int(10) unsigned DEFAULT NULL COMMENT &#39;余额（无符号）&#39;,</span></span>\n<span class="line"><span>     PRIMARY KEY (`user_id`)</span></span>\n<span class="line"><span> ) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span></span>\n<span class="line"><span> insert into `t_user`(`user_id`,`username`,`balance`) values (1,&#39;admin&#39;,50);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5创建组件" tabindex="-1"><a class="header-anchor" href="#_5创建组件"><span><strong>⑤创建组件</strong></span></a></h3><p>创建BookController：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Controller</span></span>\n<span class="line"><span> public class BookController {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private BookService bookService;</span></span>\n<span class="line"><span>     public void buyBook(Integer bookId, Integer userId){</span></span>\n<span class="line"><span>         bookService.buyBook(bookId, userId);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建接口BookService：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> public interface BookService {</span></span>\n<span class="line"><span>   void buyBook(Integer bookId, Integer userId);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建实现类BookServiceImpl：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Service</span></span>\n<span class="line"><span> public class BookServiceImpl implements BookService {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private BookDao bookDao;</span></span>\n<span class="line"><span>     @Override</span></span>\n<span class="line"><span>     public void buyBook(Integer bookId, Integer userId) {</span></span>\n<span class="line"><span>         //查询图书的价格</span></span>\n<span class="line"><span>         Integer price = bookDao.getPriceByBookId(bookId);</span></span>\n<span class="line"><span>         //更新图书的库存</span></span>\n<span class="line"><span>         bookDao.updateStock(bookId);</span></span>\n<span class="line"><span>         //更新用户的余额</span></span>\n<span class="line"><span>         bookDao.updateBalance(userId, price);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建接口BookDao：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> public interface BookDao {</span></span>\n<span class="line"><span>     Integer getPriceByBookId(Integer bookId);</span></span>\n<span class="line"><span>     void updateStock(Integer bookId);</span></span>\n<span class="line"><span>     void updateBalance(Integer userId, Integer price);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建实现类BookDaoImpl：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Repository</span></span>\n<span class="line"><span> public class BookDaoImpl implements BookDao {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private JdbcTemplate jdbcTemplate;</span></span>\n<span class="line"><span>     @Override</span></span>\n<span class="line"><span>     public Integer getPriceByBookId(Integer bookId) {</span></span>\n<span class="line"><span>         String sql = &quot;select price from t_book where book_id = ?&quot;;</span></span>\n<span class="line"><span>         return jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span>     @Override</span></span>\n<span class="line"><span>     public void updateStock(Integer bookId) {</span></span>\n<span class="line"><span>         String sql = &quot;update t_book set stock = stock - 1 where book_id = ?&quot;;</span></span>\n<span class="line"><span>         jdbcTemplate.update(sql, bookId);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span>     @Override</span></span>\n<span class="line"><span>     public void updateBalance(Integer userId, Integer price) {</span></span>\n<span class="line"><span>         String sql = &quot;update t_user set balance = balance - ? where user_id =?&quot;;</span></span>\n<span class="line"><span>             jdbcTemplate.update(sql, price, userId);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-2、测试无事务情况" tabindex="-1"><a class="header-anchor" href="#_4-3-2、测试无事务情况"><span><strong>4.3.2、测试无事务情况</strong></span></a></h3><h3 id="_1创建测试类" tabindex="-1"><a class="header-anchor" href="#_1创建测试类"><span><strong>①创建测试类</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @RunWith(SpringJUnit4ClassRunner.class)</span></span>\n<span class="line"><span> @ContextConfiguration(&quot;classpath:tx-annotation.xml&quot;)</span></span>\n<span class="line"><span> public class TxByAnnotationTest {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private BookController bookController;</span></span>\n<span class="line"><span>     @Test</span></span>\n<span class="line"><span>     public void testBuyBook(){</span></span>\n<span class="line"><span>         bookController.buyBook(1, 1);</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2模拟场景" tabindex="-1"><a class="header-anchor" href="#_2模拟场景"><span><strong>②模拟场景</strong></span></a></h3><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><h3 id="_3观察结果" tabindex="-1"><a class="header-anchor" href="#_3观察结果"><span><strong>③观察结果</strong></span></a></h3><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><h3 id="_4-3-3、加入事务" tabindex="-1"><a class="header-anchor" href="#_4-3-3、加入事务"><span><strong>4.3.3、加入事务</strong></span></a></h3><h3 id="_1添加事务配置" tabindex="-1"><a class="header-anchor" href="#_1添加事务配置"><span><strong>①添加事务配置</strong></span></a></h3><p>在Spring的配置文件中添加配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;bean id=&quot;transactionManager&quot;</span></span>\n<span class="line"><span>       class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span></span>\n<span class="line"><span>     &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span></span>\n<span class="line"><span> &lt;/bean&gt;</span></span>\n<span class="line"><span> &lt;!--</span></span>\n<span class="line"><span>     开启事务的注解驱动</span></span>\n<span class="line"><span>     通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span>\n<span class="line"><span> --&gt;</span></span>\n<span class="line"><span> &lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就</span></span>\n<span class="line"><span> 是这个默认值，则可以省略这个属性 --&gt;</span></span>\n<span class="line"><span> &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：导入的名称空间需要 <strong>tx</strong> <strong>结尾</strong>的那个。</p><h3 id="_2添加事务注解" tabindex="-1"><a class="header-anchor" href="#_2添加事务注解"><span><strong>②添加事务注解</strong></span></a></h3><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p>在BookServiceImpl的buybook()添加注解@Transactional</p><h3 id="_3观察结果-1" tabindex="-1"><a class="header-anchor" href="#_3观察结果-1"><span><strong>③观察结果</strong></span></a></h3><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><h3 id="_4-3-4、-transactional注解标识的位置" tabindex="-1"><a class="header-anchor" href="#_4-3-4、-transactional注解标识的位置"><span><strong>4.3.4、@Transactional注解标识的位置</strong></span></a></h3><p>@Transactional标识在方法上，咋只会影响该方法</p><p>@Transactional标识的类上，咋会影响类中所有的方法</p><h3 id="_4-3-5、事务属性-只读" tabindex="-1"><a class="header-anchor" href="#_4-3-5、事务属性-只读"><span><strong>4.3.5、事务属性：只读</strong></span></a></h3><h3 id="_1介绍" tabindex="-1"><a class="header-anchor" href="#_1介绍"><span><strong>①介绍</strong></span></a></h3><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><h3 id="_2使用方式" tabindex="-1"><a class="header-anchor" href="#_2使用方式"><span><strong>②使用方式</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Transactional(readOnly = true)</span></span>\n<span class="line"><span> public void buyBook(Integer bookId, Integer userId) {</span></span>\n<span class="line"><span>     //查询图书的价格</span></span>\n<span class="line"><span>     Integer price = bookDao.getPriceByBookId(bookId);</span></span>\n<span class="line"><span>     //更新图书的库存</span></span>\n<span class="line"><span>     bookDao.updateStock(bookId);</span></span>\n<span class="line"><span>     //更新用户的余额</span></span>\n<span class="line"><span>     bookDao.updateBalance(userId, price);</span></span>\n<span class="line"><span>     //System.out.println(1/0);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3注意" tabindex="-1"><a class="header-anchor" href="#_3注意"><span><strong>③注意</strong></span></a></h3><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification</p><p>are not allowed</p><h3 id="_4-3-6、事务属性-超时" tabindex="-1"><a class="header-anchor" href="#_4-3-6、事务属性-超时"><span><strong>4.3.6、事务属性：超时</strong></span></a></h3><h3 id="_1介绍-1" tabindex="-1"><a class="header-anchor" href="#_1介绍-1"><span><strong>①介绍</strong></span></a></h3><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><h3 id="_2使用方式-1" tabindex="-1"><a class="header-anchor" href="#_2使用方式-1"><span><strong>②使用方式</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Transactional(timeout = 3)</span></span>\n<span class="line"><span> public void buyBook(Integer bookId, Integer userId) {</span></span>\n<span class="line"><span>     try {</span></span>\n<span class="line"><span>         TimeUnit.SECONDS.sleep(5);</span></span>\n<span class="line"><span>     } catch (InterruptedException e) {</span></span>\n<span class="line"><span>         e.printStackTrace();</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span>     //查询图书的价格</span></span>\n<span class="line"><span>     Integer price = bookDao.getPriceByBookId(bookId);</span></span>\n<span class="line"><span>     //更新图书的库存</span></span>\n<span class="line"><span>     bookDao.updateStock(bookId);</span></span>\n<span class="line"><span>     //更新用户的余额</span></span>\n<span class="line"><span>     bookDao.updateBalance(userId, price);</span></span>\n<span class="line"><span>     //System.out.println(1/0);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3观察结果-2" tabindex="-1"><a class="header-anchor" href="#_3观察结果-2"><span><strong>③观察结果</strong></span></a></h3><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out:</p><p>deadline was Fri Jun 04 16:25:39 CST 2022</p><h3 id="_4-3-7、事务属性-回滚策略" tabindex="-1"><a class="header-anchor" href="#_4-3-7、事务属性-回滚策略"><span><strong>4.3.7、事务属性：回滚策略</strong></span></a></h3><h3 id="_1介绍-2" tabindex="-1"><a class="header-anchor" href="#_1介绍-2"><span><strong>①介绍</strong></span></a></h3><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><ul><li>rollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li><li>noRollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackFor属性：需要设置一个字符串类型的全类名</li></ul><h3 id="_2使用方式-2" tabindex="-1"><a class="header-anchor" href="#_2使用方式-2"><span><strong>②使用方式</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Transactional(noRollbackFor = ArithmeticException.class)</span></span>\n<span class="line"><span> //@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span>\n<span class="line"><span> public void buyBook(Integer bookId, Integer userId) {</span></span>\n<span class="line"><span>     //查询图书的价格</span></span>\n<span class="line"><span>     Integer price = bookDao.getPriceByBookId(bookId);</span></span>\n<span class="line"><span>     //更新图书的库存</span></span>\n<span class="line"><span>     bookDao.updateStock(bookId);</span></span>\n<span class="line"><span>     //更新用户的余额</span></span>\n<span class="line"><span>     bookDao.updateBalance(userId, price);</span></span>\n<span class="line"><span>     System.out.println(1/0);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3观察结果-3" tabindex="-1"><a class="header-anchor" href="#_3观察结果-3"><span><strong>③观察结果</strong></span></a></h3><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当</p><p>出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><h3 id="_4-3-8、事务属性-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_4-3-8、事务属性-事务隔离级别"><span><strong>4.3.8、事务属性：事务隔离级别</strong></span></a></h3><h3 id="_1介绍-3" tabindex="-1"><a class="header-anchor" href="#_1介绍-3"><span><strong>①介绍</strong></span></a></h3><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事</p><p>务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同</p><p>的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li>读未提交：READ UNCOMMITTED</li></ul><p>允许Transaction01读取Transaction02未提交的修改。</p><ul><li>读已提交：READ COMMITTED、</li></ul><p>要求Transaction01只能读取Transaction02已提交的修改。</p><ul><li>可重复读：REPEATABLE READ</li></ul><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它</p><p>事务对这个字段进行更新。</p><ul><li>串行化：SERIALIZABLE</li></ul><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它</p><p>事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th>隔离级别</th><th>Oracle</th><th>MySQL</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><h3 id="_2使用方式-3" tabindex="-1"><a class="header-anchor" href="#_2使用方式-3"><span><strong>②使用方式</strong></span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Transactional(isolation = Isolation.DEFAULT)//使用数据库默认的隔离级别</span></span>\n<span class="line"><span> @Transactional(isolation = Isolation.READ_UNCOMMITTED)//读未提交</span></span>\n<span class="line"><span> @Transactional(isolation = Isolation.READ_COMMITTED)//读已提交</span></span>\n<span class="line"><span> @Transactional(isolation = Isolation.REPEATABLE_READ)//可重复读</span></span>\n<span class="line"><span> @Transactional(isolation = Isolation.SERIALIZABLE)//串行化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-9、事务属性-事务传播行为" tabindex="-1"><a class="header-anchor" href="#_4-3-9、事务属性-事务传播行为"><span><strong>4.3.9、事务属性：事务传播行为</strong></span></a></h3><h3 id="_1介绍-4" tabindex="-1"><a class="header-anchor" href="#_1介绍-4"><span><strong>①介绍</strong></span></a></h3><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p><h3 id="_2测试" tabindex="-1"><a class="header-anchor" href="#_2测试"><span><strong>②测试</strong></span></a></h3><p>创建接口CheckoutService：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> public interface CheckoutService {</span></span>\n<span class="line"><span>   void checkout(Integer[] bookIds, Integer userId);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建实现类CheckoutServiceImpl：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Service</span></span>\n<span class="line"><span> public class CheckoutServiceImpl implements CheckoutService {</span></span>\n<span class="line"><span>     @Autowired</span></span>\n<span class="line"><span>     private BookService bookService;</span></span>\n<span class="line"><span>     @Override</span></span>\n<span class="line"><span>     @Transactional</span></span>\n<span class="line"><span>     //一次购买多本图书</span></span>\n<span class="line"><span>     public void checkout(Integer[] bookIds, Integer userId) {</span></span>\n<span class="line"><span>         for (Integer bookId : bookIds) {</span></span>\n<span class="line"><span>             bookService.buyBook(bookId, userId);</span></span>\n<span class="line"><span>         }</span></span>\n<span class="line"><span>     }</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在BookController中添加方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> @Autowired</span></span>\n<span class="line"><span> private CheckoutService checkoutService;</span></span>\n<span class="line"><span> public void checkout(Integer[] bookIds, Integer userId){</span></span>\n<span class="line"><span>     checkoutService.checkout(bookIds, userId);</span></span>\n<span class="line"><span> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在数据库中将用户的余额修改为100元</p><h3 id="_3观察结果-4" tabindex="-1"><a class="header-anchor" href="#_3观察结果-4"><span><strong>③观察结果</strong></span></a></h3><p>可以通过@Transactional中的propagation属性设置事务传播行为</p><p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p><p>@Transactional(propagation = Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开</p><p>启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调</p><p>用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不</p><p>了，就都买不了</p><p>@Transactional(propagation = Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本</p><h2 id="_4-4、基于xml的声明式事务" tabindex="-1"><a class="header-anchor" href="#_4-4、基于xml的声明式事务"><span><strong>4.4、基于XML的声明式事务</strong></span></a></h2><h3 id="_4-3-1、场景模拟" tabindex="-1"><a class="header-anchor" href="#_4-3-1、场景模拟"><span><strong>4.3.1、场景模拟</strong></span></a></h3><p>参考基于注解的声明式事务</p><h3 id="_4-3-2、修改spring配置文件" tabindex="-1"><a class="header-anchor" href="#_4-3-2、修改spring配置文件"><span><strong>4.3.2、修改Spring配置文件</strong></span></a></h3><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;aop:config&gt;</span></span>\n<span class="line"><span>     &lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span>\n<span class="line"><span>     &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(*com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;&gt;&lt;/aop:advisor&gt;</span></span>\n<span class="line"><span> &lt;/aop:config&gt;</span></span>\n<span class="line"><span> &lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span>\n<span class="line"><span> &lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span>\n<span class="line"><span> &lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span>\n<span class="line"><span> &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span></span>\n<span class="line"><span>     &lt;tx:attributes&gt;</span></span>\n<span class="line"><span>         &lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;get*&quot; read-only=&quot;true&quot;/&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;query*&quot; read-only=&quot;true&quot;/&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot;/&gt;</span></span>\n<span class="line"><span>         &lt;!-- read-only属性：设置只读属性 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span>\n<span class="line"><span>         &lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;save*&quot; read-only=&quot;false&quot; rollback-for=&quot;java.lang.Exception&quot; propagation=&quot;REQUIRES_NEW&quot;/&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;update*&quot; read-only=&quot;false&quot; rollback-for=&quot;java.lang.Exception&quot; propagation=&quot;REQUIRES_NEW&quot;/&gt;</span></span>\n<span class="line"><span>         &lt;tx:method name=&quot;delete*&quot; read-only=&quot;false&quot; rollback-for=&quot;java.lang.Exception&quot; propagation=&quot;REQUIRES_NEW&quot;/&gt;</span></span>\n<span class="line"><span>     &lt;/tx:attributes&gt;</span></span>\n<span class="line"><span> &lt;/tx:advice&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;dependency&gt;</span></span>\n<span class="line"><span>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>  &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</span></span>\n<span class="line"><span>  &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span> &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote>',159)],l={},p=(0,a(6262).A)(l,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,i)}]]),t=JSON.parse('{"path":"/SpringPrinciple/Spring/act_four_SpringTransaction.html","title":"4、Spring Transaction","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-06-04T00:00:00.000Z","category":"Spring -","tag":["Spring","jAVA","Transaction"],"description":"4、Spring Transaction 4.1、JdbcTemplate 4.1.1、简介 Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作 4.1.2、准备工作 ①加入依赖 ②创建jdbc.properties ③配置Spring的配置文件 4.1.3、测试 ①在测试类装配 JdbcTemplate ②...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/SpringPrinciple/Spring/act_four_SpringTransaction.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"4、Spring Transaction"}],["meta",{"property":"og:description","content":"4、Spring Transaction 4.1、JdbcTemplate 4.1.1、简介 Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作 4.1.2、准备工作 ①加入依赖 ②创建jdbc.properties ③配置Spring的配置文件 4.1.3、测试 ①在测试类装配 JdbcTemplate ②..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-10T12:48:31.000Z"}],["meta",{"property":"article:author","content":"Mr.bugcode"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"jAVA"}],["meta",{"property":"article:tag","content":"Transaction"}],["meta",{"property":"article:published_time","content":"2024-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-10T12:48:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4、Spring Transaction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-10T12:48:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.bugcode\\",\\"url\\":\\"intro.md\\"}]}"]]},"headers":[{"level":2,"title":"4.1、JdbcTemplate","slug":"_4-1、jdbctemplate","link":"#_4-1、jdbctemplate","children":[{"level":3,"title":"4.1.1、简介","slug":"_4-1-1、简介","link":"#_4-1-1、简介","children":[]},{"level":3,"title":"4.1.2、准备工作","slug":"_4-1-2、准备工作","link":"#_4-1-2、准备工作","children":[]},{"level":3,"title":"①加入依赖","slug":"_1加入依赖","link":"#_1加入依赖","children":[]},{"level":3,"title":"②创建jdbc.properties","slug":"_2创建jdbc-properties","link":"#_2创建jdbc-properties","children":[]},{"level":3,"title":"③配置Spring的配置文件","slug":"_3配置spring的配置文件","link":"#_3配置spring的配置文件","children":[]},{"level":3,"title":"4.1.3、测试","slug":"_4-1-3、测试","link":"#_4-1-3、测试","children":[]},{"level":3,"title":"①在测试类装配 JdbcTemplate","slug":"_1在测试类装配-jdbctemplate","link":"#_1在测试类装配-jdbctemplate","children":[]},{"level":3,"title":"②测试增删改功能","slug":"_2测试增删改功能","link":"#_2测试增删改功能","children":[]},{"level":3,"title":"③查询一条数据为实体类对象","slug":"_3查询一条数据为实体类对象","link":"#_3查询一条数据为实体类对象","children":[]},{"level":3,"title":"④查询多条数据为一个list集合","slug":"_4查询多条数据为一个list集合","link":"#_4查询多条数据为一个list集合","children":[]},{"level":3,"title":"⑤查询单行单列的值","slug":"_5查询单行单列的值","link":"#_5查询单行单列的值","children":[]}]},{"level":2,"title":"4.2、声明式事务概念","slug":"_4-2、声明式事务概念","link":"#_4-2、声明式事务概念","children":[{"level":3,"title":"4.2.1、编程式事务","slug":"_4-2-1、编程式事务","link":"#_4-2-1、编程式事务","children":[]},{"level":3,"title":"4.2.2、声明式事务","slug":"_4-2-2、声明式事务","link":"#_4-2-2、声明式事务","children":[]}]},{"level":2,"title":"4.3、基于注解的声明式事务","slug":"_4-3、基于注解的声明式事务","link":"#_4-3、基于注解的声明式事务","children":[{"level":3,"title":"4.3.1、准备工作","slug":"_4-3-1、准备工作","link":"#_4-3-1、准备工作","children":[]},{"level":3,"title":"①加入依赖","slug":"_1加入依赖-1","link":"#_1加入依赖-1","children":[]},{"level":3,"title":"②创建jdbc.properties","slug":"_2创建jdbc-properties-1","link":"#_2创建jdbc-properties-1","children":[]},{"level":3,"title":"③配置Spring的配置文件","slug":"_3配置spring的配置文件-1","link":"#_3配置spring的配置文件-1","children":[]},{"level":3,"title":"④创建表","slug":"_4创建表","link":"#_4创建表","children":[]},{"level":3,"title":"⑤创建组件","slug":"_5创建组件","link":"#_5创建组件","children":[]},{"level":3,"title":"4.3.2、测试无事务情况","slug":"_4-3-2、测试无事务情况","link":"#_4-3-2、测试无事务情况","children":[]},{"level":3,"title":"①创建测试类","slug":"_1创建测试类","link":"#_1创建测试类","children":[]},{"level":3,"title":"②模拟场景","slug":"_2模拟场景","link":"#_2模拟场景","children":[]},{"level":3,"title":"③观察结果","slug":"_3观察结果","link":"#_3观察结果","children":[]},{"level":3,"title":"4.3.3、加入事务","slug":"_4-3-3、加入事务","link":"#_4-3-3、加入事务","children":[]},{"level":3,"title":"①添加事务配置","slug":"_1添加事务配置","link":"#_1添加事务配置","children":[]},{"level":3,"title":"②添加事务注解","slug":"_2添加事务注解","link":"#_2添加事务注解","children":[]},{"level":3,"title":"③观察结果","slug":"_3观察结果-1","link":"#_3观察结果-1","children":[]},{"level":3,"title":"4.3.4、@Transactional注解标识的位置","slug":"_4-3-4、-transactional注解标识的位置","link":"#_4-3-4、-transactional注解标识的位置","children":[]},{"level":3,"title":"4.3.5、事务属性：只读","slug":"_4-3-5、事务属性-只读","link":"#_4-3-5、事务属性-只读","children":[]},{"level":3,"title":"①介绍","slug":"_1介绍","link":"#_1介绍","children":[]},{"level":3,"title":"②使用方式","slug":"_2使用方式","link":"#_2使用方式","children":[]},{"level":3,"title":"③注意","slug":"_3注意","link":"#_3注意","children":[]},{"level":3,"title":"4.3.6、事务属性：超时","slug":"_4-3-6、事务属性-超时","link":"#_4-3-6、事务属性-超时","children":[]},{"level":3,"title":"①介绍","slug":"_1介绍-1","link":"#_1介绍-1","children":[]},{"level":3,"title":"②使用方式","slug":"_2使用方式-1","link":"#_2使用方式-1","children":[]},{"level":3,"title":"③观察结果","slug":"_3观察结果-2","link":"#_3观察结果-2","children":[]},{"level":3,"title":"4.3.7、事务属性：回滚策略","slug":"_4-3-7、事务属性-回滚策略","link":"#_4-3-7、事务属性-回滚策略","children":[]},{"level":3,"title":"①介绍","slug":"_1介绍-2","link":"#_1介绍-2","children":[]},{"level":3,"title":"②使用方式","slug":"_2使用方式-2","link":"#_2使用方式-2","children":[]},{"level":3,"title":"③观察结果","slug":"_3观察结果-3","link":"#_3观察结果-3","children":[]},{"level":3,"title":"4.3.8、事务属性：事务隔离级别","slug":"_4-3-8、事务属性-事务隔离级别","link":"#_4-3-8、事务属性-事务隔离级别","children":[]},{"level":3,"title":"①介绍","slug":"_1介绍-3","link":"#_1介绍-3","children":[]},{"level":3,"title":"②使用方式","slug":"_2使用方式-3","link":"#_2使用方式-3","children":[]},{"level":3,"title":"4.3.9、事务属性：事务传播行为","slug":"_4-3-9、事务属性-事务传播行为","link":"#_4-3-9、事务属性-事务传播行为","children":[]},{"level":3,"title":"①介绍","slug":"_1介绍-4","link":"#_1介绍-4","children":[]},{"level":3,"title":"②测试","slug":"_2测试","link":"#_2测试","children":[]},{"level":3,"title":"③观察结果","slug":"_3观察结果-4","link":"#_3观察结果-4","children":[]}]},{"level":2,"title":"4.4、基于XML的声明式事务","slug":"_4-4、基于xml的声明式事务","link":"#_4-4、基于xml的声明式事务","children":[{"level":3,"title":"4.3.1、场景模拟","slug":"_4-3-1、场景模拟","link":"#_4-3-1、场景模拟","children":[]},{"level":3,"title":"4.3.2、修改Spring配置文件","slug":"_4-3-2、修改spring配置文件","link":"#_4-3-2、修改spring配置文件","children":[]}]}],"git":{"createdTime":1718023711000,"updatedTime":1718023711000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":1}]},"readingTime":{"minutes":12.71,"words":3814},"filePathRelative":"SpringPrinciple/Spring/act_four_SpringTransaction.md","localizedDate":"2024年6月4日","excerpt":"\\n<h2><strong>4.1、JdbcTemplate</strong></h2>\\n<h3><strong>4.1.1、简介</strong></h3>\\n<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>\\n<h3><strong>4.1.2、准备工作</strong></h3>\\n<h3><strong>①加入依赖</strong></h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span> &lt;dependencies&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- Spring 持久化层支持jar包 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- Spring 测试相关 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- junit测试 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;4.12&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;scope&gt;test&lt;/scope&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- MySQL驱动 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;8.0.16&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;!-- 数据源 --&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>         &lt;version&gt;1.0.31&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>     &lt;/dependency&gt;</span></span>\\n<span class=\\"line\\"><span> &lt;/dependencies&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);