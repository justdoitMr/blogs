"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3524],{2237:(e,n,i)=>{i.d(n,{l:()=>a});const a={category:{"/":{path:"/category/",map:{"Architecture design -":{path:"/category/architecture-design--/",indexes:[0,1,2,3,4,5,6]},使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[7,8,9,10]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[11]},樱桃:{path:"/category/%E6%A8%B1%E6%A1%83/",indexes:[12]},火龙果:{path:"/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",indexes:[13]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[14,13,15,16]},草莓:{path:"/category/%E8%8D%89%E8%8E%93/",indexes:[14]},"Spring -":{path:"/category/spring--/",indexes:[17,18,19,20,21,22,23]},"React -":{path:"/category/react--/",indexes:[24,25,26,27]},"designPattern -":{path:"/category/designpattern--/",indexes:[28]},"sourceCode -":{path:"/category/sourcecode--/",indexes:[29,30,31,32,33,34]},香蕉:{path:"/category/%E9%A6%99%E8%95%89/",indexes:[35,15,16]}}}},tag:{"/":{path:"/tag/",map:{java:{path:"/tag/java/",indexes:[0,1,2,3,4,5,6]},backend:{path:"/tag/backend/",indexes:[24,25,26,27,0,1,2,3,4,5,6]},bigData:{path:"/tag/bigdata/",indexes:[0,1,2,3,4,5,6]},禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[8]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[9]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[11]},Markdown:{path:"/tag/markdown/",indexes:[10]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[7]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[7]},红:{path:"/tag/%E7%BA%A2/",indexes:[14,13,12]},小:{path:"/tag/%E5%B0%8F/",indexes:[14,12]},圆:{path:"/tag/%E5%9C%86/",indexes:[12]},大:{path:"/tag/%E5%A4%A7/",indexes:[13]},Spring:{path:"/tag/spring/",indexes:[17,18,19,20,21,22,23]},jAVA:{path:"/tag/java/",indexes:[17,18,19,20,21,22,23]},Transaction:{path:"/tag/transaction/",indexes:[17]},AOP:{path:"/tag/aop/",indexes:[19]},Annotation:{path:"/tag/annotation/",indexes:[20]},react:{path:"/tag/react/",indexes:[24,25,26,27]},Java:{path:"/tag/java/",indexes:[28]},designPattern:{path:"/tag/designpattern/",indexes:[28]},mybatis:{path:"/tag/mybatis/",indexes:[33]},"source code":{path:"/tag/source-code/",indexes:[29,30,31,32,33,34]},spring:{path:"/tag/spring/",indexes:[29,30,31,32,34]},黄:{path:"/tag/%E9%BB%84/",indexes:[35,15,16]},弯曲的:{path:"/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",indexes:[35,15,16]},长:{path:"/tag/%E9%95%BF/",indexes:[35,15,16]}}}}}},2840:(e,n,i)=>{i.d(n,{M:()=>a});const a=["/KnowledgePlanet/","/articles/","/blog/","/engineeringArchitectureDesign/first-mvcDesignArchitecture.html","/engineeringArchitectureDesign/second-mvcDesignArchitecture.html","/java/javaBasic/first-introduction.html","/java/javaBasic/second-jdkInstallion.html","/articles/page.html","/articles/disable.html","/articles/encrypt.html","/articles/markdown.html","/articles/layout.html","/posts/cherry.html","/posts/dragonfruit.html","/posts/strawberry.html","/java/javaCore/2.html","/java/javaCore/","/SpringPrinciple/Spring/act_four_SpringTransaction.html","/SpringPrinciple/Spring/act_one_SpringAopPrinciple.html","/SpringPrinciple/Spring/act_three_SpringAopBasic.html","/SpringPrinciple/Spring/act_two_SpringAnnotation.html","/SpringPrinciple/springboot/act_one_springIntroduction.html","/SpringPrinciple/springboot/act_two_springboot_basic.html","/SpringPrinciple/springmvc/act_one_springMvcCharacterOne.html","/backend/react/act_four_lifeCycle.html","/backend/react/act_four_scaffold.html","/backend/react/act_one_reactIntroduction.html","/backend/react/act_two_componentCodding.html","/designpattern/creational/act_one_builderPattern.html","/frameDesignAndSourceCode/springSourceCode/act_fifteen-spring-ProxyObjSetPro.html","/frameDesignAndSourceCode/springSourceCode/act_fourteen-spring-UseAnnotationAutoPro.html","/frameDesignAndSourceCode/springSourceCode/act_thirteen-spring-UseAopInSpringContainer.html","/frameDesignAndSourceCode/springSourceCode/act_two-springBeanDefineAndRegister.html","/frameDesignAndSourceCode/mybatisSourceCode/first-mybatisintroduction.html","/frameDesignAndSourceCode/springSourceCode/act_one-springIntroduction.html","/java/javaCore/4.html","/backend/react/act_three_ReactEvent.html","/SpringPrinciple/Spring/act_five_SpringAnnotationPrin.html","/designpattern/designPrinciple/act_one_classDiagram.html","/frameDesignAndSourceCode/springSourceCode/act_tweve-spring-UseAopInSpringContainer.html","/frameDesignAndSourceCode/springSourceCode/act_eleven-spring-aopJdkAndCglib.html","/frameDesignAndSourceCode/springSourceCode/act_eight-springAwareContainerObj.html","/frameDesignAndSourceCode/springSourceCode/act_five-springResourceLoadAndObjRegister.html","/frameDesignAndSourceCode/springSourceCode/act_four-springPropertyAutowareAnddepObj.html","/frameDesignAndSourceCode/springSourceCode/act_nine-springActOnAndBeanFactory.html","/frameDesignAndSourceCode/springSourceCode/act_seven-springInitAndDestoryMethod.html","/frameDesignAndSourceCode/springSourceCode/act_six-springContext.html","/frameDesignAndSourceCode/springSourceCode/act_ten-springContainerAndEventListener.html","/frameDesignAndSourceCode/springSourceCode/act_three-springConstructurInstantiation.html","/home.html","/ContainerCloud/","/bigdata/","/business/","/frameDesignAndSourceCode/code.html","/interview/","/interview/java.html","/introduction/","/ContainerCloud/docker/","/ContainerCloud/k8s/","/algorithm/algor/","/algorithm/algor/basicDataStructure.html","/algorithm/dataStructure/","/bigdata/Flink/","/bigdata/spark/","/intro.html","/posts/tomato.html"]},3077:(e,n,i)=>{i.d(n,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[7,36,37,38,39,24,25,26,27,40,17,18,19,20,21,22,23,41,42,43,44,45,46,47,48,29,30,31,32,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,28,33,34,5,6,64,8,9,11,10,65,14,13,12,35,15,16]}},star:{"/":{path:"/star/",indexes:[15,7]}},timeline:{"/":{path:"/timeline/",indexes:[36,37,38,39,24,25,26,27,40,17,18,19,20,21,22,23,41,42,43,44,45,46,47,48,29,30,31,32,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,0,1,2,3,4,28,33,34,5,6,64,8,9,11,10,65,14,13,12,35,15,16,7]}}}},6245:(e,n,i)=>{i.d(n,{B:()=>z});var a={};i.r(a);var s={};i.r(s),i.d(s,{default:()=>g});var t={};i.r(t),i.d(t,{default:()=>x});var r={};i.r(r),i.d(r,{default:()=>q});var l={};i.r(l),i.d(l,{default:()=>V});var p=i(8278),d=i(3812),o=i(3073),c=i(596),h=i(9403);const g=(0,p.re)({enhance:({app:e})=>{(0,d.L4)("Badge")||e.component("Badge",c.A),(0,d.L4)("FontIcon")||e.component("FontIcon",h.A)},setup:()=>{(0,o.vCw)('@import url("https://at.alicdn.com/t/c/font_4570931_i3acfllzyt.css");\n')},rootComponents:[]});var m=i(6358),k=i(9588),u=i(355),b=i(1599),v=i(5496),y=i(457),B=i(7152),A=i(5214),E=i(4367),C=i(3027),f=i(2763),S=i(6663),D=i(9227),w=i(9589);const x=(0,p.re)({enhance:({app:e})=>{e.component("CodeTabs",B.A),(0,d.L4)("CodeGroup",e)||e.component("CodeGroup",A.lF),(0,d.L4)("CodeGroupItem",e)||e.component("CodeGroupItem",A.E7),e.component("CodeDemo",E.A),e.component("MdDemo",C.A),(0,D.cX)(e),e.component("RevealJs",S.A),e.component("Tabs",w.A)},setup:()=>{(0,f.p)()}});var _=i(3004),I=i(641),F=i(8223),j=i(3727),P=i(9445);const O={"/":{install:"安装",iOSInstall:"点击分享按钮然后点击“添加到主屏幕”",cancel:"取消",close:"关闭",prevImage:"上一张图片",nextImage:"下一张图片",desc:"详情",feature:"主要特色",explain:"该应用可以安装在你的 PC 或移动设备上。这将使该 Web 应用程序外观和行为与其他应用程序相同。它将在出现在应用程序列表中，并可以固定到主屏幕，开始菜单或任务栏。此 Web 应用程序还将能够与其他应用程序和你的操作系统安全地进行交互。",hint:"发现新内容可用",update:"新内容已就绪"}},q=(0,p.re)({setup:()=>{(0,F.K)("service-worker.js",!1),(0,j.x)()},rootComponents:[()=>(0,I.h)(P.O,{locales:O})]});var M=i(783),R=i(8465),T=i(8030),L=i(9920),J=i(8130);(0,R.M_)((e=>{const n=e.t,i=!1!==e.I,a=e.i;return i?{title:n,content:a?()=>[(0,I.h)(M.GB,{icon:a}),n]:null,order:e.O,index:e.I}:null}));const V=(0,p.re)({enhance:({app:e,router:n})=>{const{scrollBehavior:i}=n.options;n.options.scrollBehavior=async(...e)=>(await M.lE.wait(),i(...e)),(0,M.fk)(e),e.component("HopeIcon",M.GB),e.component("BloggerInfo",T.tI),e.component("SocialMedias",T.rS),e.component("GlobalEncrypt",L.J),e.component("LocalEncrypt",L.n)},setup:()=>{(0,M.PV)(),(0,M.i$)(),(0,T.su)()},layouts:{Layout:M.PE,NotFound:M.Mk,BlogCategory:T.Pn,BlogHome:T.qX,BlogType:T.z7,Timeline:T.Kf,Slide:J.A}}),z=[a,s,m,k,u,b,v,y,t,_,r,l].map((e=>e.default)).filter(Boolean)},4788:(e,n,i)=>{i.d(n,{J:()=>s,c:()=>a});const a=JSON.parse("{}"),s=Object.fromEntries([["/",{loader:()=>i.e(4470).then(i.bind(i,9788)),meta:{t:"主页",i:"home"}}],["/home.html",{loader:()=>i.e(9759).then(i.bind(i,6190)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:2},t:"home 页",y:"a"}}],["/intro.html",{loader:()=>i.e(3912).then(i.bind(i,4061)),meta:{d:1717223166e3,v:"/assets/images/cover3.jpg",e:"\n<p>我是bugcode,一个专注写作的后端开发程序员</p>\n",r:{minutes:.08,words:25},t:"介绍页",i:"circle-info",y:"a"}}],["/ContainerCloud/",{loader:()=>i.e(8759).then(i.bind(i,3085)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:4},t:"云原生篇",y:"a"}}],["/KnowledgePlanet/",{loader:()=>i.e(9123).then(i.bind(i,1311)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"<p>a</p>\n<h1>1 知识星球首页</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n<h1>2 如何写博客</h1>\n",r:{minutes:.12,words:37},t:"1 知识星球首页",i:"pen-to-square",y:"a"}}],["/articles/",{loader:()=>i.e(944).then(i.bind(i,747)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"<p>a</p>\n<h1>1 为什么写博客</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n<h1>2 如何写博客</h1>\n",r:{minutes:.12,words:37},t:"1 为什么写博客",i:"pen-to-square",y:"a"}}],["/articles/disable.html",{loader:()=>i.e(4668).then(i.bind(i,4053)),meta:{d:1717223166e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/articles/encrypt.html",{loader:()=>i.e(973).then(i.bind(i,7274)),meta:{d:1717223166e3,c:["使用指南"],g:["加密"],e:"\n<p>实际的文章内容。</p>\n<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>\n<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>\n",r:{minutes:.51,words:154},t:"密码加密的文章",i:"lock",y:"a"}}],["/articles/layout.html",{loader:()=>i.e(1856).then(i.bind(i,3311)),meta:{d:1717223166e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",O:2,y:"a"}}],["/articles/markdown.html",{loader:()=>i.e(4191).then(i.bind(i,8694)),meta:{d:1717223166e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.51,words:1053},t:"Markdown 展示",O:2,y:"a"}}],["/articles/page.html",{loader:()=>i.e(8909).then(i.bind(i,2248)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/bigdata/",{loader:()=>i.e(7143).then(i.bind(i,1650)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:4},t:"大数据篇",y:"a"}}],["/blog/",{loader:()=>i.e(7487).then(i.bind(i,9397)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"<p>a</p>\n<h1>1 为什么写博客</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n<h1>2 如何写博客</h1>\n",r:{minutes:.12,words:37},t:"1 为什么写博客",i:"pen-to-square",y:"a"}}],["/business/",{loader:()=>i.e(8173).then(i.bind(i,719)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:3},t:"业务篇",y:"a"}}],["/engineeringArchitectureDesign/first-mvcDesignArchitecture.html",{loader:()=>i.e(8469).then(i.bind(i,6734)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"<p>a</p>\n<h1>1、mvc架构介绍</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n",r:{minutes:.1,words:30},t:"1、mvc架构介绍",i:"pen-to-square",y:"a"}}],["/engineeringArchitectureDesign/second-mvcDesignArchitecture.html",{loader:()=>i.e(787).then(i.bind(i,6351)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"<p>a</p>\n<h1>1、为什么是mvc分层</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n",r:{minutes:.11,words:32},t:"1、为什么是mvc分层",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/code.html",{loader:()=>i.e(4954).then(i.bind(i,5768)),meta:{d:1717338253e3,e:"\n<h2>Spring源码实现</h2>\n<h2>Mybatis源码实现</h2>\n",r:{minutes:.05,words:14},t:"源码专题",y:"a"}}],["/interview/",{loader:()=>i.e(9858).then(i.bind(i,2478)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:3},t:"面试篇",y:"a"}}],["/interview/java.html",{loader:()=>i.e(2768).then(i.bind(i,8262)),meta:{d:1717338253e3,e:"\n",r:{minutes:.02,words:5},t:"java基础整理",y:"a"}}],["/introduction/",{loader:()=>i.e(5351).then(i.bind(i,3111)),meta:{d:1717338253e3,e:"\n<h1>1、如何使用本站</h1>\n",r:{minutes:.03,words:9},t:"导读",y:"a"}}],["/posts/cherry.html",{loader:()=>i.e(2345).then(i.bind(i,4561)),meta:{d:16416864e5,l:"2022年1月9日",c:["樱桃"],g:["红","小","圆"],r:{minutes:.05,words:15},t:"",i:"pen-to-square",y:"a"}}],["/posts/dragonfruit.html",{loader:()=>i.e(5853).then(i.bind(i,7925)),meta:{d:16417728e5,l:"2022年1月10日",c:["火龙果","水果"],g:["红","大"],r:{minutes:.06,words:17},t:"",i:"pen-to-square",y:"a"}}],["/posts/strawberry.html",{loader:()=>i.e(8461).then(i.bind(i,1924)),meta:{d:16418592e5,l:"2022年1月11日",c:["水果","草莓"],g:["红","小"],r:{minutes:.05,words:16},t:"",i:"pen-to-square",y:"a"}}],["/posts/tomato.html",{loader:()=>i.e(6218).then(i.bind(i,8354)),meta:{d:1717223166e3,r:{minutes:.11,words:34},t:"",y:"a"}}],["/ContainerCloud/docker/",{loader:()=>i.e(8472).then(i.bind(i,8503)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:3},t:"1、Docker篇",y:"a"}}],["/ContainerCloud/k8s/",{loader:()=>i.e(3568).then(i.bind(i,918)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:3},t:"1、K8S篇",y:"a"}}],["/SpringPrinciple/Spring/act_five_SpringAnnotationPrin.html",{loader:()=>i.e(4829).then(i.bind(i,6650)),meta:{d:1718109112e3,t:"",y:"a"}}],["/SpringPrinciple/Spring/act_four_SpringTransaction.html",{loader:()=>i.e(8981).then(i.bind(i,6272)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA","Transaction"],e:'\n<h2><strong>4.1、JdbcTemplate</strong></h2>\n<h3><strong>4.1.1、简介</strong></h3>\n<p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p>\n<h3><strong>4.1.2、准备工作</strong></h3>\n<h3><strong>①加入依赖</strong></h3>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span> &lt;dependencies&gt;</span></span>\n<span class="line"><span>     &lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 持久化层支持jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span>\n<span class="line"><span>     &lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-orm&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- Spring 测试相关 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;spring-test&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;5.3.1&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- junit测试 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;junit&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;4.12&lt;/version&gt;</span></span>\n<span class="line"><span>         &lt;scope&gt;test&lt;/scope&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- MySQL驱动 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;8.0.16&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span>     &lt;!-- 数据源 --&gt;</span></span>\n<span class="line"><span>     &lt;dependency&gt;</span></span>\n<span class="line"><span>         &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>\n<span class="line"><span>         &lt;artifactId&gt;druid&lt;/artifactId&gt;</span></span>\n<span class="line"><span>         &lt;version&gt;1.0.31&lt;/version&gt;</span></span>\n<span class="line"><span>     &lt;/dependency&gt;</span></span>\n<span class="line"><span> &lt;/dependencies&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:12.71,words:3814},t:"4、Spring Transaction",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/Spring/act_one_SpringAopPrinciple.html",{loader:()=>i.e(8005).then(i.bind(i,1372)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA"],e:'\n<h2>1、jdk代理</h2>\n<p>springAOP底层依赖代理技术实现，有两种代理方式：</p>\n<ul>\n<li>JDK代理：基于接口的动态代理技术</li>\n<li>cglib代理：基于父类的动态代理技术</li>\n</ul>\n<figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406041228008.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>\n<h3>1.1、JDK动态代理</h3>',r:{minutes:17.2,words:5159},t:"1、Spring AOP原理",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/Spring/act_three_SpringAopBasic.html",{loader:()=>i.e(1991).then(i.bind(i,6645)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA","AOP"],e:"\n<blockquote>\n<p>ioc中主要是<strong>容器对对象的管理</strong>，主要通过<strong>注解和xml文件</strong>方式进行装配。第三方的jar包通常不能使用注解的方式装配，因为里面大多是class文件，不能修改源码，所以通常使用xml文件的方式装配。<br>\n自己写的类可以使用注解+扫描的方式管理。</p>\n</blockquote>\n<h2><strong>3.1、场景模拟</strong></h2>\n<h3><strong>3.1.1、声明接口</strong></h3>\n<p>声明计算器接口Calculator，s包含加减乘除的抽象方法</p>",r:{minutes:16.45,words:4934},t:"3、Spring AOP",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/Spring/act_two_SpringAnnotation.html",{loader:()=>i.e(6090).then(i.bind(i,6062)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA","Annotation"],e:'\n<h1>1、@SpringBoot注解</h1>\n<p>我们可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">RetentionPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">RUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Documented</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Inherited</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">SpringBootConfiguration</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">EnableAutoConfiguration</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">ComponentScan</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">excludeFilters</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> { </span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> FilterType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">CUSTOM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> TypeExcludeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">\t\t@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B">Filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66">type</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> FilterType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">CUSTOM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66"> classes</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B"> AutoConfigurationExcludeFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75">) })</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B"> SpringBootApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75"> {}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:13.93,words:4178},t:"2、Spring 注解",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/springboot/act_one_springIntroduction.html",{loader:()=>i.e(7985).then(i.bind(i,8574)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA"],e:'\n<h2>1.1、Spring的能力</h2>\n<p>官网地址</p>\n<p><a href="https://spring.io/" target="_blank" rel="noopener noreferrer">https://spring.io/</a></p>\n<div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>微服务</span></span>\n<span class="line"><span>一个项目进行拆分成单个小服务。</span></span>\n<span class="line"><span>springboot基于spring framework，简化了spring framework的复杂配置。</span></span>\n<span class="line"><span>可以整合spring生态中的其它技术栈，免于写复杂的配置。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>响应式编程</span></span>\n<span class="line"><span>基于异步非阻塞的方式，通过应用之间构建异步数据流的方式，异步数据流允许我们只用少量的线程资源，</span></span>\n<span class="line"><span>构建高吞吐量的应用。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>分布式云</span></span>\n<span class="line"><span>项目拆分成微服务后，变成分布式应用。spring cloud用于解决这种情况。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>WEB项目开发</span></span>\n<span class="line"><span>例如springmvc开发web项目。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>无服务开发，</span></span>\n<span class="line"><span>FaaS，Function as a Service，"功能即服务"（也译作“函数即服务”）无需购买服务器，直接将服务</span></span>\n<span class="line"><span>上传到云平台，动态分配资源，</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>事件驱动</span></span>\n<span class="line"><span>spring可将整个分布式系统构建出，一个基于事件方式的实时数据流。通过该数据流，就能通过响应式的方式</span></span>\n<span class="line"><span>，占用少量的资源实现高吞吐量的业务需求。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>批处理。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.23,words:1869},t:"1、Spring生态圈",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/springboot/act_two_springboot_basic.html",{loader:()=>i.e(1250).then(i.bind(i,9805)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA"],e:'\n<h1>1、Helloword程序</h1>\n<p>需求：浏览发送/hello请求，响应 Hello，Spring Boot 2</p>\n<h2>1.1、创建Maven工程</h2>\n<p>引入依赖</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">&lt;!--引入springboot的父工程--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-parent&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;2.3.4.RELEASE&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">        &lt;!--要用springboot开发web场景模块，就引入springboot对应web模块的依赖--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">    &lt;!--指定编译构建的jdk版本，不需要在服务期安装部署tomcat,只需要将程序打成jar包，</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">//在服务期上执行即可--&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;maven-compiler-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;3.5.4&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic">                &lt;!-- 下面指定为自己需要的版本 --&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;1.8&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;1.8&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">                &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75">build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:45.19,words:13557},t:"2、SpringBoot基础入门（二）",i:"pen-to-square",y:"a"}}],["/SpringPrinciple/springmvc/act_one_springMvcCharacterOne.html",{loader:()=>i.e(3452).then(i.bind(i,6020)),meta:{d:17174592e5,l:"2024年6月4日",c:"Spring -",g:["Spring","jAVA"],e:"\n",r:{minutes:.06,words:18},t:"1、SpringMvc 基础一",i:"pen-to-square",y:"a"}}],["/algorithm/algor/",{loader:()=>i.e(616).then(i.bind(i,412)),meta:{d:1717338253e3,e:"\n<h2>链表</h2>\n<h2>二叉树</h2>\n",r:{minutes:.03,words:9},t:"算法专题",y:"a"}}],["/algorithm/algor/basicDataStructure.html",{loader:()=>i.e(5933).then(i.bind(i,44)),meta:{d:1717338253e3,e:"\n",r:{minutes:.02,words:6},t:"基础数据结构",y:"a"}}],["/algorithm/dataStructure/",{loader:()=>i.e(6730).then(i.bind(i,9359)),meta:{d:1717338253e3,e:"\n",r:{minutes:.02,words:6},t:"数据结构专题",y:"a"}}],["/backend/react/act_four_lifeCycle.html",{loader:()=>i.e(47).then(i.bind(i,5468)),meta:{d:17178048e5,l:"2024年6月8日",c:"React -",g:["backend","react"],e:"\n<p>render()调用时机：初始化渲染，状态更新后<br>\ncomponentDidMount调用时机：组件挂载页面之后调用</p>\n<p>java中bean对象拥有完整生命周期，react中组件和bean对象同等地位，拥有完整的生命周期。</p>\n<h2>1.简介</h2>\n<p>组件从创建到死亡，会经过一些特定的阶段</p>\n<p>React组件中包含一系列钩子函数{生命周期回调函数}，会在特定的时刻调用</p>\n<p>我们在定义组件的时候，会在特定的声明周期回调函数中，做特定的工作</p>\n<p>在 React 中为我们提供了一些生命周期钩子函数，让我们能在 React 执行的重要阶段，在钩子函数中做一些事情。那么在 React 的生命周期中，有哪些钩子函数呢，我们来总结一下</p>",r:{minutes:15.97,words:4790},t:"4、生命周期",i:"pen-to-square",y:"a"}}],["/backend/react/act_four_scaffold.html",{loader:()=>i.e(617).then(i.bind(i,1913)),meta:{d:17178048e5,l:"2024年6月8日",c:"React -",g:["backend","react"],e:"\n<h2>1.什么是 React 脚手架？</h2>\n<p>在我们的现实生活中，脚手架最常用的使用场景是在工地，它是为了保证施工顺利的、方便的进行而搭建的，在工地上搭建的脚手架可以帮助工人们高校的去完成工作，同时在大楼建设完成后，拆除脚手架并不会有任何的影响。</p>\n<p>在我们的 React 项目中，脚手架的作用与之有异曲同工之妙</p>\n<p>React 脚手架其实是一个工具帮我们快速的生成项目的工程化结构，每个项目的结构其实大致都是相同的，所以 React 给我提前的搭建好了，这也是脚手架强大之处之一，也是用 React 创建 SPA 应用的最佳方式</p>\n<h2>2.为什么要用脚手架？</h2>",r:{minutes:14.12,words:4235},t:"4、React脚手架",i:"pen-to-square",y:"a"}}],["/backend/react/act_one_reactIntroduction.html",{loader:()=>i.e(8434).then(i.bind(i,2012)),meta:{d:17178048e5,l:"2024年6月8日",c:"React -",g:["backend","react"],e:"\n<h2>1.React简介</h2>\n<p><strong>react是什么？</strong></p>\n<p><strong>React</strong> 是一个用于构建用户界面的 JavaScript 库。</p>\n<ul>\n<li>是一个将数据渲染为 HTML 视图的开源 JS 库</li>\n<li>它遵循基于组件的方法，有助于构建可重用的 UI 组件</li>\n<li>它用于开发复杂的交互式的 web 和移动 UI</li>\n</ul>\n<blockquote>\n<p>React 有什么特点？</p>\n</blockquote>\n<ol>\n<li>使用虚拟 DOM 而不是真正的 DOM</li>\n<li>它可以用服务器渲染</li>\n<li>它遵循单向数据流或数据绑定</li>\n<li>高效</li>\n<li>声明式编码，组件化编码</li>\n</ol>",r:{minutes:8.33,words:2498},t:"1、react介绍",i:"pen-to-square",y:"a"}}],["/backend/react/act_three_ReactEvent.html",{loader:()=>i.e(2508).then(i.bind(i,8847)),meta:{d:1718939729e3,r:{minutes:9.71,words:2912},t:"",y:"a"}}],["/backend/react/act_two_componentCodding.html",{loader:()=>i.e(2104).then(i.bind(i,1093)),meta:{d:17178048e5,l:"2024年6月8日",c:"React -",g:["backend","react"],e:"\n<h2>1、组件的使用</h2>\n<p>当应用是以多组件的方式实现，这个应用就是一个组件化的应用</p>\n<p><strong>只有两种方式的组件</strong>:</p>\n<ul>\n<li>函数组件</li>\n<li>类式组件</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong></p>\n<ol>\n<li>组件名必须是首字母大写（React 会将以小写字母开头的组件视为原生 DOM 标签。例如，&lt; div /&gt;<code>代表 HTML 的 div 标签，而</code>&lt; Weclome /&gt; 则代表一个组件，并且需在作用域内使用 <code>Welcome</code>）</li>\n<li>虚拟DOM元素只能有一个根元素</li>\n<li>虚拟DOM元素必须有结束标签 <code>&lt; /&gt;</code></li>\n</ol>\n</blockquote>",r:{minutes:31.7,words:9511},t:"2、面向组件编程",i:"pen-to-square",y:"a"}}],["/bigdata/Flink/",{loader:()=>i.e(2890).then(i.bind(i,4819)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:2},t:"1、Flink",y:"a"}}],["/bigdata/spark/",{loader:()=>i.e(6529).then(i.bind(i,5585)),meta:{d:1717338253e3,e:"\n",r:{minutes:.01,words:2},t:"1、spark",y:"a"}}],["/designpattern/creational/act_one_builderPattern.html",{loader:()=>i.e(1751).then(i.bind(i,1769)),meta:{d:17172864e5,l:"2024年6月2日",c:"designPattern -",g:["Java","designPattern"],e:'\n<h2>需求</h2>\n<ol>\n<li>需要建房子：这一过程为打桩、砌墙、封顶；</li>\n<li>房子有各种各样的，比如<strong>普通房，高楼，别墅</strong>，各种房子的过程虽然一样，但是要求不要相同的.</li>\n<li>请编写程序，完成需求.</li>\n</ol>\n<h2>传统方式解决盖房子</h2>\n<p>抽象类抽象出修建房子的步骤，然后各种房子去实现抽象类实现盖房子的动作。</p>\n<h3><strong>类图</strong></h3>\n<figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406112036490.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',r:{minutes:9.54,words:2861},t:"建造者模式",i:"pen-to-square",y:"a"}}],["/designpattern/designPrinciple/act_one_classDiagram.html",{loader:()=>i.e(5639).then(i.bind(i,607)),meta:{d:1718109112e3,e:'\n<h2>一、创建型</h2>\n<h3>1. Simple Factory Method（简单工厂方法）</h3>\n<p>定义：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>\n<p>类图：</p>\n<figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406111953482.png" alt="image-20240611195324067" tabindex="0" loading="lazy"><figcaption>image-20240611195324067</figcaption></figure>',r:{minutes:6.17,words:1850},t:"1、类图总览",y:"a"}}],["/frameDesignAndSourceCode/mybatisSourceCode/first-mybatisintroduction.html",{loader:()=>i.e(543).then(i.bind(i,675)),meta:{d:17172864e5,l:"2024年6月2日",c:"sourceCode -",g:["mybatis","source code"],e:"<p>a</p>\n<h1>1、mybatis框架介绍</h1>\n<h2>1.1 引言</h2>\n<p>什么是架构</p>\n",r:{minutes:.1,words:29},t:"1、mybatis框架介绍",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_eight-springAwareContainerObj.html",{loader:()=>i.e(1741).then(i.bind(i,1313)),meta:{d:1717415604e3,e:"\n",r:{minutes:.03,words:8},t:"8、Aware感知容器接口",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_eleven-spring-aopJdkAndCglib.html",{loader:()=>i.e(297).then(i.bind(i,3485)),meta:{d:1717564848e3,e:"\n<h2>1、目标</h2>\n<p><strong>到本章节我们将要从 IOC 的实现，转入到关于 AOP(<strong>Aspect Oriented Programming</strong>) 内容的开发。在软件行业，AOP 意为：面向切面编程，通过预编译的方式和运行期间动态代理实现程序功能功能的统一维护。其实 AOP 也是 OOP 的延续，在 Spring 框架中是一个非常重要的内容，使用 AOP 可以对业务逻辑的各个部分进行隔离，从而使各模块间的业务逻辑耦合度降低，提高代码的可复用性，同时也能提高开发效率。</strong></p>\n<p><strong>关于 AOP 的核心技术实现主要是动态代理的使用，就像你可以给一个接口的实现类，使用代理的方式替换掉这个实现类，使用代理类来处理你需要的逻辑。比如：</strong></p>",r:{minutes:8.33,words:2498},t:"11、基于JDK，Cglib实现AOP切面",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_fifteen-spring-ProxyObjSetPro.html",{loader:()=>i.e(9852).then(i.bind(i,2999)),meta:{d:17173728e5,l:"2024年6月3日",c:"sourceCode -",g:["spring","source code"],e:"\n<h2>1、目标</h2>\n<p>其实本章节要解决的问题就是关于如何给代理对象中的属性填充相应的值，因为在之前把AOP动态代理，融入到Bean的生命周期时，创建代理对象是在整个创建 Bean 对象之前，也就是说这个代理对象的创建并不是在 Bean 生命周期中。<br>\n所以本章节中我们要把代理对象的创建融入到 Bean 的生命周期中，也就是需要把创建代理对象的逻辑迁移到 Bean 对象执行初始化方法之后，在执行代理对象的创建。</p>\n<h2>2、设计</h2>\n<p>按照创建代理对象的操作 DefaultAdvisorAutoProxyCreator 实现的 InstantiationAwareBeanPostProcessor 接口，那么原本在 Before 中的操作，则需要放到 After 中处理</p>",r:{minutes:5.83,words:1749},t:"15、给代理对象属性设置值",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_five-springResourceLoadAndObjRegister.html",{loader:()=>i.e(1607).then(i.bind(i,7170)),meta:{d:1717415604e3,e:"\n",r:{minutes:.04,words:12},t:"5、资源加载解析和对象注册",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_four-springPropertyAutowareAnddepObj.html",{loader:()=>i.e(9672).then(i.bind(i,8835)),meta:{d:1717415604e3,e:"\n",r:{minutes:.03,words:10},t:"4、属性注入和依赖对象",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_fourteen-spring-UseAnnotationAutoPro.html",{loader:()=>i.e(3821).then(i.bind(i,9365)),meta:{d:17173728e5,l:"2024年6月3日",c:"sourceCode -",g:["spring","source code"],e:'\n<h2>1、目标</h2>\n<p>在目前 IOC、AOP 两大核心功能模块的支撑下，完全可以管理 Bean 对象的注册和获取，不过这样的使用方式总感觉像是刀耕火种有点难用。因此在上一章节我们解决需要手动配置 Bean 对象到 spring.xml 文件中，改为可以自动扫描带有注解 @Component 的对象完成自动装配和注册到 Spring 容器的操作。<br>\n那么在自动扫描包注册 Bean 对象之后，就需要把原来在配置文件中通过 property name="token" 配置属性和Bean的操作，也改为可以自动注入。这就像我们使用 Spring 框架中 @Autowired、@Value 注解一样，完成我们对属性和对象的注入操作。</p>',r:{minutes:9.07,words:2722},t:"14、通过注解注入属性信息",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_nine-springActOnAndBeanFactory.html",{loader:()=>i.e(2348).then(i.bind(i,4440)),meta:{d:1717415604e3,e:"\n",r:{minutes:.03,words:8},t:"9、对象作用于和BeanFactory",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_one-springIntroduction.html",{loader:()=>i.e(5846).then(i.bind(i,2363)),meta:{d:17172864e5,l:"2024年6月2日",c:"sourceCode -",g:["spring","source code"],e:"\n<h2>1、目标</h2>\n<h3>1.1、引言</h3>\n<p>spring bean容器的目标是什么？负责管理应用程序bean对象配置和生命周期，某种意义上容器其实就是一个负责管理并且维护bean声明周期的代理，代替应用程序本身管理的bean对象， 你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一个新的实例，以及它们是如何相互关联构建和使用的 如果应用需要使用bean对象，直接从容器中获取即可，这样应用程序可以更加关注业务本身，不需要考虑实现业务过程中需要的组件以及组件的管理，解耦了应用程序和应用程序使用的组件，这些组件就像一个一个的模块，在实现业务的过程中，需要哪些组件，就将组件模块插入spring即可，让spring容器负责管理各个组件。</p>",r:{minutes:5.33,words:1599},t:"1、实现简单的spring容器",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_seven-springInitAndDestoryMethod.html",{loader:()=>i.e(273).then(i.bind(i,266)),meta:{d:1717415604e3,e:"\n",r:{minutes:.04,words:13},t:"7、Bean对象的初始化和销毁方法",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_six-springContext.html",{loader:()=>i.e(7195).then(i.bind(i,8590)),meta:{d:1717415604e3,e:"\n",r:{minutes:.02,words:7},t:"6、实现Spring上下文",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_ten-springContainerAndEventListener.html",{loader:()=>i.e(183).then(i.bind(i,8176)),meta:{d:1717415604e3,e:"\n",r:{minutes:.03,words:10},t:"10、容器事件和事件监听",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_thirteen-spring-UseAopInSpringContainer.html",{loader:()=>i.e(2802).then(i.bind(i,5970)),meta:{d:17173728e5,l:"2024年6月3日",c:"sourceCode -",g:["spring","source code"],e:"\n<h2>1、目标</h2>\n<p>到目前为止我们已经实现了spring中ioc和 aop中绝大部分内容，只不过还是需要用户在xml中配置bean对象的依赖关系才能使用，参考当前spring的实现，用户不在需要写太多的配置，只需要在目标类上添加几个注解，spring就可以自动扫描然后注册到容器中，这个过程中就包括了包的扫描解析和注册，注解配置使用，占位符属性填充等内容，因此本章节我们就实现自动注解的配置功能。</p>\n<h2>2、设计</h2>\n<p>首先我们要考虑，为了可以简化 Bean 对象的配置，让整个 Bean 对象的注册都是自动扫描的，那么基本需要的元素包括：扫描路径入口、XML解析扫描信息、给需要扫描的Bean对象做注解标记、扫描Class对象摘取Bean注册的基本信息，组装注册信息、注册成Bean对象。那么在这些条件元素的支撑下，就可以实现出通过自定义注解和配置扫描路径的情况下，完成 Bean 对象的注册。除此之外再顺带解决一个配置中占位符属性的知识点，比如可以通过 ${token} 给 Bean 对象注入进去属性信息，那么这个操作需要用到 BeanFactoryPostProcessor，因为它可以处理 在所有的 BeanDefinition 加载完成后，实例化 Bean 对象之前，提供修改 BeanDefinition 属性的机制 而实现这部分内容是为了后续把此类内容结合到自动化配置处理中  。</p>",r:{minutes:8.28,words:2484},t:"13、自动扫描注册bean对象",i:"pen-to-square",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_three-springConstructurInstantiation.html",{loader:()=>i.e(3917).then(i.bind(i,9045)),meta:{d:1717415604e3,e:"\n",r:{minutes:.04,words:12},t:"3、实现构造函数实例化策略",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_tweve-spring-UseAopInSpringContainer.html",{loader:()=>i.e(5434).then(i.bind(i,9340)),meta:{d:1718109112e3,e:"\n<h2>1、目标</h2>\n<p>在上一章节我们通过基于 Proxy.newProxyInstance 代理操作中处理方法匹配和方法拦截，对匹配的对象进行自定义的处理操作。并把这样的技术核心内容拆解到 Spring 中，用于实现 AOP 部分，通过拆分后基本可以明确各个类的职责，包括你的代理目标对象属性、拦截器属性、方法匹配属性，以及两种不同的代理操作 JDK 和 CGlib 的方式。<br>\n再有了一个 AOP 核心功能的实现后，我们可以通过单元测试的方式进行验证切面功能对方法进行拦截，但如果这是一个面向用户使用的功能，就不太可能让用户这么复杂且没有与 Spring 结合的方式单独使用 AOP，虽然可以满足需求，但使用上还是过去分散。<br>\n因此我们需要在本章节完成 AOP 核心功能与 Spring 框架的整合，最终能通过在 Spring 配置的方式完成切面的操作。</p>",r:{minutes:7.69,words:2306},t:"12、将AOP扩展到Bean生命周期",y:"a"}}],["/frameDesignAndSourceCode/springSourceCode/act_two-springBeanDefineAndRegister.html",{loader:()=>i.e(8709).then(i.bind(i,142)),meta:{d:17173728e5,l:"2024年6月3日",c:"sourceCode -",g:["spring","source code"],e:"\n<h2>1、目标</h2>\n<p>在第一章节，已经实现类一个简易的spring容器模型，容器模型提供了bean对象的注册和从容器中获取bean的功能，但是实现中还存在两点缺陷：</p>\n<ol>\n<li>bean的定义信息，只是用一个object代替了bean的定义，实际使用的时候，还需要new一个对象传入bean的定义中，所以bean的创建操作并没有交给容器，因此本章我们目标将bean对象的创建移交给容器。</li>\n<li>多次获取同一个bean对象，应该从缓存中获取，不应该在重新创建一个对象。</li>\n</ol>\n<h2>2、设计</h2>\n<p>第一章节中，类型的注册，其实是一个Object对象，是直接将创建好的对象注册到Map中，需要的时候直接获取已经创建好的bean，本章需要将对象的创建移交给容器，因此就需要修改BeanDefinition定义，在注册阶段，只注册bean的类型信息，当获取bean没有的时候，spring容器根据bean class信息创建对象并且放到容器中，因此首先要做的就是修改BeanDefinition里面的Object为Class类型信息。</p>",r:{minutes:9.02,words:2706},t:"2、SpringBean定义",i:"pen-to-square",y:"a"}}],["/java/javaBasic/first-introduction.html",{loader:()=>i.e(2601).then(i.bind(i,9929)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"\n<h2>1.1 引言</h2>\n",r:{minutes:.07,words:22},t:"1、java介绍",i:"pen-to-square",y:"a"}}],["/java/javaBasic/second-jdkInstallion.html",{loader:()=>i.e(9577).then(i.bind(i,1102)),meta:{d:17172864e5,l:"2024年6月2日",c:"Architecture design -",g:["java","backend","bigData"],e:"\n<h2>1.1 引言</h2>\n",r:{minutes:.07,words:22},t:"2、java介绍",i:"pen-to-square",y:"a"}}],["/java/javaCore/2.html",{loader:()=>i.e(4997).then(i.bind(i,7672)),meta:{d:16414272e5,l:"2022年1月6日",c:["香蕉","水果"],g:["黄","弯曲的","长"],e:"\n<p>一个被数字 <code>10</code> 星标了的香蕉文章。</p>\n",r:{minutes:.18,words:55},t:"香蕉 2",i:"pen-to-square",y:"a"}}],["/java/javaCore/4.html",{loader:()=>i.e(5859).then(i.bind(i,1393)),meta:{d:16416e8,l:"2022年1月8日",c:["香蕉"],g:["黄","弯曲的","长"],e:"\n<h2>标题 2</h2>\n<p>这里是内容。</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.12,words:36},t:"香蕉 4",i:"pen-to-square",y:"a"}}],["/java/javaCore/",{loader:()=>i.e(4359).then(i.bind(i,226)),meta:{d:16413408e5,l:"2022年1月5日",c:["香蕉","水果"],g:["黄","弯曲的","长"],e:"\n",r:{minutes:.08,words:23},t:"1、java高级",i:"pen-to-square",y:"a"}}],["/404.html",{loader:()=>i.e(7490).then(i.bind(i,3699)),meta:{t:""}}],["/engineeringArchitectureDesign/",{loader:()=>i.e(2983).then(i.bind(i,8320)),meta:{t:"Engineering Architecture Design"}}],["/frameDesignAndSourceCode/",{loader:()=>i.e(3031).then(i.bind(i,8011)),meta:{t:"Frame Design and Source Code"}}],["/posts/",{loader:()=>i.e(8666).then(i.bind(i,581)),meta:{t:"Posts"}}],["/SpringPrinciple/Spring/",{loader:()=>i.e(5058).then(i.bind(i,889)),meta:{t:"Spring"}}],["/SpringPrinciple/",{loader:()=>i.e(6334).then(i.bind(i,7126)),meta:{t:"Spring Principle"}}],["/SpringPrinciple/springboot/",{loader:()=>i.e(8066).then(i.bind(i,5696)),meta:{t:"Springboot"}}],["/SpringPrinciple/springmvc/",{loader:()=>i.e(5354).then(i.bind(i,4786)),meta:{t:"Springmvc"}}],["/algorithm/",{loader:()=>i.e(1068).then(i.bind(i,3058)),meta:{t:"Algorithm"}}],["/backend/react/",{loader:()=>i.e(7777).then(i.bind(i,9491)),meta:{t:"React"}}],["/backend/",{loader:()=>i.e(9649).then(i.bind(i,8960)),meta:{t:"Backend"}}],["/designpattern/creational/",{loader:()=>i.e(5866).then(i.bind(i,1445)),meta:{t:"Creational"}}],["/designpattern/",{loader:()=>i.e(1761).then(i.bind(i,1996)),meta:{t:"Designpattern"}}],["/designpattern/designPrinciple/",{loader:()=>i.e(7116).then(i.bind(i,7371)),meta:{t:"Design Principle"}}],["/frameDesignAndSourceCode/mybatisSourceCode/",{loader:()=>i.e(5261).then(i.bind(i,8666)),meta:{t:"Mybatis Source Code"}}],["/frameDesignAndSourceCode/springSourceCode/",{loader:()=>i.e(9417).then(i.bind(i,5144)),meta:{t:"Spring Source Code"}}],["/java/javaBasic/",{loader:()=>i.e(2402).then(i.bind(i,1842)),meta:{t:"Java Basic"}}],["/java/",{loader:()=>i.e(5891).then(i.bind(i,2558)),meta:{t:"Java"}}],["/category/",{loader:()=>i.e(3583).then(i.bind(i,6375)),meta:{t:"分类",I:!1}}],["/category/architecture-design--/",{loader:()=>i.e(5930).then(i.bind(i,4164)),meta:{t:"Architecture design - 分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(4021).then(i.bind(i,8844)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>i.e(8622).then(i.bind(i,3609)),meta:{t:"指南 分类",I:!1}}],["/category/%E6%A8%B1%E6%A1%83/",{loader:()=>i.e(9080).then(i.bind(i,2813)),meta:{t:"樱桃 分类",I:!1}}],["/category/%E7%81%AB%E9%BE%99%E6%9E%9C/",{loader:()=>i.e(8280).then(i.bind(i,9552)),meta:{t:"火龙果 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>i.e(8484).then(i.bind(i,9665)),meta:{t:"水果 分类",I:!1}}],["/category/%E8%8D%89%E8%8E%93/",{loader:()=>i.e(6112).then(i.bind(i,4872)),meta:{t:"草莓 分类",I:!1}}],["/category/spring--/",{loader:()=>i.e(9031).then(i.bind(i,7993)),meta:{t:"Spring - 分类",I:!1}}],["/category/react--/",{loader:()=>i.e(7377).then(i.bind(i,64)),meta:{t:"React - 分类",I:!1}}],["/category/designpattern--/",{loader:()=>i.e(2442).then(i.bind(i,6795)),meta:{t:"designPattern - 分类",I:!1}}],["/category/sourcecode--/",{loader:()=>i.e(2274).then(i.bind(i,8330)),meta:{t:"sourceCode - 分类",I:!1}}],["/category/%E9%A6%99%E8%95%89/",{loader:()=>i.e(334).then(i.bind(i,2165)),meta:{t:"香蕉 分类",I:!1}}],["/tag/",{loader:()=>i.e(1797).then(i.bind(i,6159)),meta:{t:"标签",I:!1}}],["/tag/java/",{loader:()=>i.e(250).then(i.bind(i,3357)),meta:{t:"标签: java",I:!1}}],["/tag/backend/",{loader:()=>i.e(6362).then(i.bind(i,4465)),meta:{t:"标签: backend",I:!1}}],["/tag/bigdata/",{loader:()=>i.e(7156).then(i.bind(i,6682)),meta:{t:"标签: bigData",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>i.e(1331).then(i.bind(i,8963)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>i.e(8496).then(i.bind(i,7247)),meta:{t:"标签: 加密",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>i.e(609).then(i.bind(i,6469)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>i.e(7931).then(i.bind(i,5712)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>i.e(602).then(i.bind(i,7574)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(1431).then(i.bind(i,5059)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E7%BA%A2/",{loader:()=>i.e(4068).then(i.bind(i,949)),meta:{t:"标签: 红",I:!1}}],["/tag/%E5%B0%8F/",{loader:()=>i.e(3215).then(i.bind(i,1366)),meta:{t:"标签: 小",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>i.e(9048).then(i.bind(i,2038)),meta:{t:"标签: 圆",I:!1}}],["/tag/%E5%A4%A7/",{loader:()=>i.e(3047).then(i.bind(i,7658)),meta:{t:"标签: 大",I:!1}}],["/tag/spring/",{loader:()=>i.e(6847).then(i.bind(i,9347)),meta:{t:"标签: Spring",I:!1}}],["/tag/java/",{loader:()=>i.e(250).then(i.bind(i,3357)),meta:{t:"标签: jAVA",I:!1}}],["/tag/transaction/",{loader:()=>i.e(9210).then(i.bind(i,3734)),meta:{t:"标签: Transaction",I:!1}}],["/tag/aop/",{loader:()=>i.e(6830).then(i.bind(i,9828)),meta:{t:"标签: AOP",I:!1}}],["/tag/annotation/",{loader:()=>i.e(271).then(i.bind(i,8663)),meta:{t:"标签: Annotation",I:!1}}],["/tag/react/",{loader:()=>i.e(2477).then(i.bind(i,8395)),meta:{t:"标签: react",I:!1}}],["/tag/java/",{loader:()=>i.e(250).then(i.bind(i,3357)),meta:{t:"标签: Java",I:!1}}],["/tag/designpattern/",{loader:()=>i.e(8718).then(i.bind(i,6368)),meta:{t:"标签: designPattern",I:!1}}],["/tag/mybatis/",{loader:()=>i.e(3223).then(i.bind(i,5036)),meta:{t:"标签: mybatis",I:!1}}],["/tag/source-code/",{loader:()=>i.e(991).then(i.bind(i,9595)),meta:{t:"标签: source code",I:!1}}],["/tag/spring/",{loader:()=>i.e(6847).then(i.bind(i,9347)),meta:{t:"标签: spring",I:!1}}],["/tag/%E9%BB%84/",{loader:()=>i.e(942).then(i.bind(i,1784)),meta:{t:"标签: 黄",I:!1}}],["/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",{loader:()=>i.e(7817).then(i.bind(i,8088)),meta:{t:"标签: 弯曲的",I:!1}}],["/tag/%E9%95%BF/",{loader:()=>i.e(5519).then(i.bind(i,6896)),meta:{t:"标签: 长",I:!1}}],["/article/",{loader:()=>i.e(7511).then(i.bind(i,3293)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>i.e(7199).then(i.bind(i,7157)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>i.e(5464).then(i.bind(i,3138)),meta:{t:"时间轴",I:!1}}]])},3193:(e,n,i)=>{i.d(n,{U:()=>a});const a=JSON.parse('{"base":"/","lang":"zh-CN","title":"bugcode 的架构之路","description":"bugcode 架构之路","head":[["meta",{"name":"robots","content":"all"}],["meta",{"name":"author","content":"bugcode"}],["meta",{"http-equiv":"Cache-Control","content":"no-cache, no-store, must-revalidate"}],["meta",{"http-equiv":"Pragma","content":"no-cache"}],["meta",{"http-equiv":"Expires","content":"0"}],["meta",{"name":"keywords","content":"Java, Java基础, 并发编程, JVM, 虚拟机, 数据库, MySQL, Spring, Redis, MyBatis, SpringBoot, IDEA, 求职面试, 面渣逆袭, 学习路线"}],["meta",{"name":"apple-mobile-web-app-capable","content":"yes"}],["script",{},"\\n        var _hmt = _hmt || [];\\n        (function() {\\n          var hm = document.createElement(\\"script\\");\\n          hm.src = \\"https://hm.baidu.com/hm.js?5230ac143650bf5eb3c14f3fb9b1d3ec\\";\\n          var s = document.getElementsByTagName(\\"script\\")[0]; \\n          s.parentNode.insertBefore(hm, s);\\n        })();\\n      "],["link",{"rel":"stylesheet","href":"//at.alicdn.com/t/c/font_4570931_i3acfllzyt.css"}],["link",{"rel":"manifest","href":"/manifest.webmanifest","crossorigin":"use-credentials"}],["meta",{"name":"theme-color","content":"#46bd87"}]],"locales":{}}')},7021:(e,n,i)=>{i.d(n,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$4kVwbMmbWz6KqiHofNBSVOMb4qpw2606YAtGTJRybCqV2OOcDV8Gy"]}},"author":{"name":"Mr.bugcode","url":"intro.md"},"logo":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/log.jpg","roundAvatar":true,"repo":"https://github.com/justdoitMr/blogs/","docsDir":"themeHope","docsBranch":"master","breadcrumb":false,"fullscreen":true,"darkmode":"switch","footer":"<a href=\\"https://beian.miit.gov.cn/\\" target=\\"_blank\\">豫ICP备20230606088</a><img src=\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202406112054052.png\\" height=\\"15px\\" width=\\"15px\\" /><a target=\\"_blank\\" href=\\"http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=41030502000411\\"><span>豫公网安备 41080552980273号</span></a>","displayFooter":true,"blog":{"description":"路漫漫其修远兮,吾将上下而求索","intro":"/intro.html","sidebarDisplay":"mobile","avatar":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/log.jpg","medias":{"github":"https://github.com/justdoitMr","Zhihu":"https://example.com","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press"}}},"components":{"components":["Badge","VPCard"]},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/",{"text":"导读","icon":"book","link":"/introduction/"},{"text":"算法","icon":"pen-to-square","children":[{"text":"算法专题","link":"/algorithm/algor/","icon":"pen-to-square"},{"text":"数据结构专题","icon":"pen-to-square","link":"/algorithm/dataStructure/"}]},{"text":"设计模式","icon":"pen-to-square","children":[{"text":"设计原则","link":"/designpattern/designPrinciple/","icon":"pen-to-square"},{"text":"创建型","icon":"pen-to-square","link":"/designpattern/creational/"},{"text":"行为型","icon":"pen-to-square","link":"/designpattern/Behavior/"},{"text":"结构型","icon":"pen-to-square","link":"/designpattern/structural/"}]},{"text":"源码","icon":"pen-to-square","children":[{"text":"Spring源码实现","link":"/frameDesignAndSourceCode/springSourceCode/","icon":"pen-to-square"},{"text":"Mybatis框架实现","icon":"pen-to-square","link":"/frameDesignAndSourceCode/mybatisSourceCode/"}]},{"text":"架构专题","icon":"gaishu","link":"/engineeringArchitectureDesign/"},{"text":"面试篇","icon":"gaishu","link":"/interview/"},{"text":"基础归档","icon":"gaishu","link":"/home.md"},{"text":"精选博文","icon":"pen-to-square","prefix":"/posts/","children":[{"text":"苹果","icon":"pen-to-square","prefix":"javaBasic/","children":[{"text":"苹果1","icon":"pen-to-square","link":"1"},{"text":"苹果2","icon":"pen-to-square","link":"2"},"3","4"]},{"text":"香蕉","icon":"pen-to-square","prefix":"javaCore/","children":[{"text":"香蕉 1","icon":"pen-to-square","link":"1"},{"text":"香蕉 2","icon":"pen-to-square","link":"2"},"3","4"]},{"text":"樱桃","icon":"pen-to-square","link":"cherry"},{"text":"火龙果","icon":"pen-to-square","link":"dragonfruit"},"tomato","strawberry"]},{"text":"业务专题","icon":"gaishu","link":"/business/"},{"text":"知识星球","icon":"gaishu","link":"/KnowledgePlanet/"},{"text":"B站","icon":"gaishu","link":"/KnowledgePlanet/"},{"text":"about","icon":"book","link":"/intro.md/"}],"sidebar":{"/introduction/":["readme.md"],"/algorithm/algor/":["README.md","basicDataStructure.md"],"/algorithm/dataStructure/":["README.md"],"/KnowledgePlanet/":["README.md"],"/interview/":["README.md","java.md"],"/business/":["README.md"],"/frameDesignAndSourceCode/springSourceCode/":["act_one-springIntroduction.md","act_two-springBeanDefineAndRegister.md","act_three-springConstructurInstantiation.md","act_four-springPropertyAutowareAnddepObj.md","act_five-springResourceLoadAndObjRegister.md","act_six-springContext.md","act_seven-springInitAndDestoryMethod.md","act_eight-springAwareContainerObj.md","act_nine-springActOnAndBeanFactory.md","act_ten-springContainerAndEventListener.md","act_eleven-spring-aopJdkAndCglib.md","act_tweve-spring-UseAopInSpringContainer.md","act_thirteen-spring-UseAopInSpringContainer.md","act_fourteen-spring-UseAnnotationAutoPro.md","act_fifteen-spring-ProxyObjSetPro.md"],"/frameDesignAndSourceCode/mybatisSourceCode/":["first-mybatisintroduction.md"],"/engineeringArchitectureDesign/":["first-mvcDesignArchitecture.md","second-mvcDesignArchitecture.md"],"/designpattern/designPrinciple/":["act_one_classDiagram.md"],"/designpattern/creational/":["act_one_builderPattern.md"],"/designpattern/Behavior/":[""],"/designpattern/structural/":[""],"/":[{"text":"一、导读","collapsible":true,"children":[{"prefix":"/introduction/","text":"1、导读","link":"readme"},{"prefix":"introduction/","text":"2、引言","link":"intrd"}]},{"text":"二、java核心","collapsible":true,"children":[{"prefix":"java/javaBasic/","text":"1、Java概述","collapsible":true,"children":["first-introduction.md","second-jdkInstallion.md"]},{"prefix":"java/javaCore/","text":"2、Java进阶","collapsible":true,"children":["README.md"]}]},{"text":"三、Spring篇","collapsible":true,"children":[{"prefix":"SpringPrinciple/Spring/","text":"1、Spring","collapsible":true,"children":["act_one_SpringAopPrinciple.md","act_two_SpringAnnotation.md","act_three_SpringAopBasic.md","act_four_SpringTransaction.md"]},{"prefix":"SpringPrinciple/springmvc/","text":"2、SpringMvc","collapsible":true,"children":["act_one_springMvcCharacterOne.md"]},{"prefix":"SpringPrinciple/springboot/","text":"3、SpringBoot","collapsible":true,"children":["act_one_springIntroduction.md","act_two_springboot_basic.md"]}]},{"text":"四、大数据篇","collapsible":true,"children":[{"prefix":"bigdata/Flink","text":"1、Flink","collapsible":true,"children":["README.md"]},{"prefix":"bigdata/spark","text":"2、spark","collapsible":true,"children":["README.md"]}]},{"text":"五、云原生","collapsible":true,"children":[{"prefix":"ContainerCloud/docker/","text":"1、Docker","collapsible":true,"children":["README.md"]},{"prefix":"ContainerCloud/k8s/","text":"2、K8S","collapsible":true,"children":["README.md"]}]},{"text":"五、前端篇","collapsible":true,"children":[{"prefix":"backend/react/","text":"1、React","collapsible":true,"children":[]}]}]}}}}')},6424:(e,n,i)=>{i.d(n,{S:()=>a});const a=()=>[i.e(8896).then(i.bind(i,7408)),i.e(8896).then(i.bind(i,743))]},1995:(e,n,i)=>{i.d(n,{v:()=>a});const a={}},5246:(e,n,i)=>{i.d(n,{P:()=>a});const a={github:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>'}}},e=>{e.O(0,[325,9547],(()=>(8731,e(e.s=8731)))),e.O()}]);