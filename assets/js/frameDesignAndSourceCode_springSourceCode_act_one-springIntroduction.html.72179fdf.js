"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5846],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},3802:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const e=[(0,n.Fv)('<h1 id="_1、实现简单的spring容器" tabindex="-1"><a class="header-anchor" href="#_1、实现简单的spring容器"><span>1、实现简单的spring容器</span></a></h1><h2 id="_1、目标" tabindex="-1"><a class="header-anchor" href="#_1、目标"><span>1、目标</span></a></h2><h3 id="_1-1、引言" tabindex="-1"><a class="header-anchor" href="#_1-1、引言"><span>1.1、引言</span></a></h3><p>spring bean容器的目标是什么？负责管理应用程序bean对象配置和生命周期，某种意义上容器其实就是一个负责管理并且维护bean声明周期的代理，代替应用程序本身管理的bean对象， 你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一个新的实例，以及它们是如何相互关联构建和使用的 如果应用需要使用bean对象，直接从容器中获取即可，这样应用程序可以更加关注业务本身，不需要考虑实现业务过程中需要的组件以及组件的管理，解耦了应用程序和应用程序使用的组件，这些组件就像一个一个的模块，在实现业务的过程中，需要哪些组件，就将组件模块插入spring即可，让spring容器负责管理各个组件。</p><h3 id="_1-2、目标" tabindex="-1"><a class="header-anchor" href="#_1-2、目标"><span>1.2、目标</span></a></h3><p>spring容器包含并且管理者bean对象的整个生命周期，从bean对象的定义，创建，初始化，使用，销毁，管理bean对象的每一个阶段，如果一个bean对象的定义被加载到容器中，那么后续这个bean就会被容器统一进行创建，初始化，然后将bean存放在容器中，程序中就可以直接从容器中获取并且使用这个bean对象了。<br> 本章节中，我们就简单的实现一个容器，然后将bean对象加载到容器中，最后客户端从容器中获取bean对象使用。</p><h2 id="_2、设计" tabindex="-1"><a class="header-anchor" href="#_2、设计"><span>2、设计</span></a></h2><p>在程序设计中，所有可以存放数据的数据结构实现，都可以称作容器，比如常见的Map，List，Set等都可以叫做容器，因为这些集合都有一个共性，即可以用来存放各种数据。<br> 思考一下容器应该使用什么样数据结构？</p><ul><li>所选用的数据结构应该方便程序获取bean对象，因为程序在运行过程中会频繁使用bean对象，因此时间复杂度控制在O(1）。</li><li>每一个bean对象应该有一个惟一的标示，方便程序获取单例的bean对象。<br> 因此，选择key-val类型的数据结构作为容器，key中存放bean对象的唯一标识，val中存放bean对象。<br> 麻雀虽小，五脏俱全，spring容器的核心过程就是spring根据配置，将应用程序所用到的所有bean对象都注入到spring容器中，然后管理bean的生命周期，所以在本章节中，首先实现一个简易的spring 容器，然后将bean对象注入容器中，最后应用从容器中获取bean对象使用。</li></ul><p>下图是一个简单容器的结构</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/simpleSpringContainer.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>BeanDefinition：bean对象的定义信息，即bean的class信息，但是在本章节中，首先以一种简易的方式将bean注入到BeanDefinition定义中，下个章节在实现BeanDefinition定义。</li><li>BeanRegister：Bean注册类，其实就是服务将bean对象的类型信息注入到容器中。</li></ul><h2 id="_3、实现" tabindex="-1"><a class="header-anchor" href="#_3、实现"><span>3、实现</span></a></h2><h3 id="_3-1、类图结构" tabindex="-1"><a class="header-anchor" href="#_3-1、类图结构"><span>3.1、类图结构</span></a></h3><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/simpleContainerClassPic.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>BeanDefinition:用于定义Bean的定义信息，BeanDefinition#bean对象就是用来模拟存储bean定义。</li><li>BeanFactory：代表了创建Bean对象的工厂，BeanFactory#registerBeanDefinition()负责注册bean的定义，BeanFactory#getBean()负责对外提供获取bean对象的途径，在应用程序中对bean对象的获取一般很频繁，所以会使用工厂模式创建bean对象。</li></ul><h3 id="_3-2、beandefinition-bean类型定义" tabindex="-1"><a class="header-anchor" href="#_3-2、beandefinition-bean类型定义"><span>3.2、BeanDefinition bean类型定义</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//    存放bean对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">bean</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bean;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bean;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BeanDefinition#bean，用来模拟存储bean对象的定义信息。在后续会逐步完善BeanDefinition的定义， 例如：SCOPE_SINGLETON、SCOPE_PROTOTYPE、ROLE_APPLICATION、ROLE_SUPPORT、ROLE_INFRASTRUCTURE 以及 Bean Class 信息。</p><h3 id="_3-3、beanfactory-工厂" tabindex="-1"><a class="header-anchor" href="#_3-3、beanfactory-工厂"><span>3.3、BeanFactory 工厂</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//    存放bean的名字和定义的映射</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinitionMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> ConcurrentHashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> beanDefinitionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">BeanDefinition</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        beanDefinitionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, beanDefinition);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>BeanFactory#beanDefinitionMap：存放bean的定义，因为我们要在o(1)复杂度内获取到bean对象，所以使用map结构存储定义。</li><li>BeanFactory第一个作用就是作为一个简单工厂，对外提供获取容器中bean对象的方法，第二个职责就是负责注册bean对象的定义信息。</li><li>在spring源码中，BeanFactory是访问spring容器的最顶层接口；The root interface for accessing a Spring bean container.</li></ul><h2 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试"><span>4、测试</span></a></h2><h3 id="_4-1、测试用例" tabindex="-1"><a class="header-anchor" href="#_4-1、测试用例"><span>4.1、测试用例</span></a></h3><p><strong>Service定义</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> queryUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;查询用户信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义PeopleService bean对象，然后将bean对象注入到容器中。</p><h3 id="_4-2、测试结果" tabindex="-1"><a class="header-anchor" href="#_4-2、测试结果"><span>4.2、测试结果</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Test</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> testBeanDefine</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">       // 1.初始化 BeanFactory</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        BeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 2.注入bean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;userService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, beanDefinition);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 3.获取bean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> userService </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (PeopleService) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;userService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        userService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">queryUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试结果</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">查询用户信息</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Process</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> finished with exit code </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从单测的程序来看，要从我们实现简单容器中获取bean对象，至少会通过一下三个步骤：</p><ol><li>初始化BeanFactory，实例化一个工厂，通过工厂从容器中获取Bean对象；</li><li>注册BeanDefinition，将Bean的定义注册到容器中，当在获取对象的时候，如果容器中没有对象，就根据bean定义创建一个容器，如果有Bean对象，直接获取对象。另外可以发现，在注册bean对象的时候，直接将bean对象实例化后放到容器中，所以目前为了简易实现容器功能，后续对象的创建会根据bean的类型创还能。</li><li>从容器中获取对象并且使用对象，获取对象使用工厂，工厂里面提供了getBean()方法用于从容器中获取bean对象，获取到的bean是Object类型，可以通过强转转换为目标类型。</li></ol><h2 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结"><span>5、总结</span></a></h2><p><strong>小结</strong></p><ol><li>容器使用数据结构选型？</li><li>如果一个对象会被大量创建并且使用，就考虑使用简单工厂设计模式，让工厂作为一个接口对外部提供获取对象的途径。</li></ol><p><strong>目标</strong></p><ol><li>学会使用简单工厂设计模式；</li></ol>',38)],l={},t=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/frameDesignAndSourceCode/springSourceCode/act_one-springIntroduction.html","title":"1、实现简单的spring容器","lang":"zh-CN","frontmatter":{"title":"1、实现简单的spring容器","icon":"file","order":1,"author":"bugcode","date":"2020-01-01T00:00:00.000Z","category":["SPRING","SPRINGBOOT","JAVA"],"tag":["后端","java","spring"],"sticky":false,"star":true,"footer":"Spring基础","copyright":"bugcode","description":"1、实现简单的spring容器 1、目标 1.1、引言 spring bean容器的目标是什么？负责管理应用程序bean对象配置和生命周期，某种意义上容器其实就是一个负责管理并且维护bean声明周期的代理，代替应用程序本身管理的bean对象， 你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/frameDesignAndSourceCode/springSourceCode/act_one-springIntroduction.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"1、实现简单的spring容器"}],["meta",{"property":"og:description","content":"1、实现简单的spring容器 1、目标 1.1、引言 spring bean容器的目标是什么？负责管理应用程序bean对象配置和生命周期，某种意义上容器其实就是一个负责管理并且维护bean声明周期的代理，代替应用程序本身管理的bean对象， 你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/simpleSpringContainer.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-07T07:43:14.000Z"}],["meta",{"property":"article:author","content":"bugcode"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-07T07:43:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1、实现简单的spring容器\\",\\"image\\":[\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/simpleSpringContainer.webp\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/simpleContainerClassPic.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-07T07:43:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bugcode\\"}]}"]]},"headers":[{"level":2,"title":"1、目标","slug":"_1、目标","link":"#_1、目标","children":[{"level":3,"title":"1.1、引言","slug":"_1-1、引言","link":"#_1-1、引言","children":[]},{"level":3,"title":"1.2、目标","slug":"_1-2、目标","link":"#_1-2、目标","children":[]}]},{"level":2,"title":"2、设计","slug":"_2、设计","link":"#_2、设计","children":[]},{"level":2,"title":"3、实现","slug":"_3、实现","link":"#_3、实现","children":[{"level":3,"title":"3.1、类图结构","slug":"_3-1、类图结构","link":"#_3-1、类图结构","children":[]},{"level":3,"title":"3.2、BeanDefinition bean类型定义","slug":"_3-2、beandefinition-bean类型定义","link":"#_3-2、beandefinition-bean类型定义","children":[]},{"level":3,"title":"3.3、BeanFactory 工厂","slug":"_3-3、beanfactory-工厂","link":"#_3-3、beanfactory-工厂","children":[]}]},{"level":2,"title":"4、测试","slug":"_4、测试","link":"#_4、测试","children":[{"level":3,"title":"4.1、测试用例","slug":"_4-1、测试用例","link":"#_4-1、测试用例","children":[]},{"level":3,"title":"4.2、测试结果","slug":"_4-2、测试结果","link":"#_4-2、测试结果","children":[]}]},{"level":2,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]}],"git":{"createdTime":1717415604000,"updatedTime":1723016594000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":5}]},"readingTime":{"minutes":5.86,"words":1758},"filePathRelative":"frameDesignAndSourceCode/springSourceCode/act_one-springIntroduction.md","localizedDate":"2020年1月1日","excerpt":"\\n<h2>1、目标</h2>\\n<h3>1.1、引言</h3>\\n<p>spring bean容器的目标是什么？负责管理应用程序bean对象配置和生命周期，某种意义上容器其实就是一个负责管理并且维护bean声明周期的代理，代替应用程序本身管理的bean对象， 你可以配置你的每个 Bean 对象是如何被创建的，这些 Bean 可以创建一个单独的实例或者每次需要时都生成一个新的实例，以及它们是如何相互关联构建和使用的 如果应用需要使用bean对象，直接从容器中获取即可，这样应用程序可以更加关注业务本身，不需要考虑实现业务过程中需要的组件以及组件的管理，解耦了应用程序和应用程序使用的组件，这些组件就像一个一个的模块，在实现业务的过程中，需要哪些组件，就将组件模块插入spring即可，让spring容器负责管理各个组件。</p>","autoDesc":true}')}}]);