"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8709],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},142:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var n=a(641);const e=[(0,n.Fv)('<h1 id="_2、springbean定义" tabindex="-1"><a class="header-anchor" href="#_2、springbean定义"><span>2、SpringBean定义</span></a></h1><h2 id="_1、目标" tabindex="-1"><a class="header-anchor" href="#_1、目标"><span>1、目标</span></a></h2><p>在第一章节，已经实现类一个简易的spring容器模型，容器模型提供了bean对象的注册和从容器中获取bean的功能，但是实现中还存在两点缺陷：</p><ol><li>bean的定义信息，只是用一个object代替了bean的定义，实际使用的时候，还需要new一个对象传入bean的定义中，所以bean的创建操作并没有交给容器，因此本章我们目标将bean对象的创建移交给容器。</li><li>多次获取同一个bean对象，应该从缓存中获取，不应该在重新创建一个对象。</li></ol><h2 id="_2、设计" tabindex="-1"><a class="header-anchor" href="#_2、设计"><span>2、设计</span></a></h2><p>第一章节中，类型的注册，其实是一个Object对象，是直接将创建好的对象注册到Map中，需要的时候直接获取已经创建好的bean，本章需要将对象的创建移交给容器，因此就需要修改BeanDefinition定义，在注册阶段，只注册bean的类型信息，当获取bean没有的时候，spring容器根据bean class信息创建对象并且放到容器中，因此首先要做的就是修改BeanDefinition里面的Object为Class类型信息。</p><p>第二个要做的就是单例Bean，如果应用已经创建了一个Bean对象在容器中，另外一个程序在使用bean对象的时候直接从容器中获取即可，不需要再重新创建bean对象，因此我们要创建一个单例接口，只负责单例对象的获取。</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/act_two_design.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先看到容器中多了两个组件，Class容器和单例组件，Class组件存储在注册bean定义阶段bean的class信息，单例组件，提供单例容器，应用程序在获取bean的时候，容器中存在bean对象直接获取使用即可。</p><p>BeanFactory工厂，定义顶级的工厂接口，提供从容器中获取对象的方法getBean(String name),之后由AbstractBeanFactory抽象类实现工厂，实现具体的获取bean对象的方法，使用模板模式，可以将核心的逻辑统一在抽象类中实现，方便后续扩展。此外抽象类继承了DefaultListableBeanFactory单例抽象类，因此在AbstractBeanFactory中就默认拥有了获取单例对象的功能了，因此通过继承的方法，扩展了类的功能。</p><p>AbstractAutowireCapableBeanFactory抽象类继承AbstractBeanFactory抽象类，在实现父抽象类中定义的方法，这样每个类分工明确，父类一般定义调用关系，子类一般定义方法实现，各司其职。</p><p><strong>抽象类有两种主要用法：</strong></p><ol><li>定义调用过程</li><li>实现功能扩展，哪一个类想拥有抽象类功能，直接继承此类即可。</li></ol><p>顶级单例接口SingletonBeanRegistry定义获取单例bean对象的方法，默认的实现类DefaultSingletonBeanRegistry定义单例容器，然后实现向单例容器中增加bean对象和获取bean对象的方法。作为一个抽象单例接口的默认实现，以后哪一个类需要有获取单例对象的功能，直接继承这个抽象类即可。</p><h2 id="_3、实现" tabindex="-1"><a class="header-anchor" href="#_3、实现"><span>3、实现</span></a></h2><h3 id="_3-1、核心类图" tabindex="-1"><a class="header-anchor" href="#_3-1、核心类图"><span>3.1、核心类图</span></a></h3><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/act_two_class.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>抽象类AbstractBeanFactory主要定义了获取bean对象的调用过程，然后继承DefaultSingletonBeanRegistry单例抽象类，因此就具备了想单例容器中添加和获取bean对象的能力。</p><p>抽象类 AbstractAutowireCapableBeanFactory 继承自AbstractBeanFactory，他首先会实现属于自己的方法，主要是其子类的一些公共的方法，非公共的方法由继承自AbstractAutowireCapableBeanFactory 的子类进行实现，这样做的好处是每一个类只需要关注并且实现属于自己的方法即可，公共的方法由其父类同意实现封装，这里就体现了在实现类过程中每个类只需要关注自己的内容，做到高内聚，类的设计最小化。DefaultSingletonBeanRegistry 类实现了单例接口 SingletonBeanRegistry ，又会被抽象类 AbstractBeanFactory 继承，因此抽象类 AbstractBeanFactory 不但拥有工厂接口的方法，还拥有单例接口的方法。</p><p>BeanDefinitionRegistry接口：定义具体的注册bean信息的顶级接口，实现此接口的类拥有注册bean定义的能力。DefaultListableBeanFactory具体类继承AbstractAutowireCapableBeanFactory，因此具备从容器中获取bean对象的能力和向单例容器中增加和获取单例bean对象的能力，然后实现BeanDefinitionRegistry接口，因此又具备了向容器中注册bean类型定义的功能，所以说是功能很强大的一个类实现。</p><p>从本章节开始，可以看到在实现中针对不同的功能，分别定义不同的接口，然后由子类去实现或者继承</p><p>BeanFactory：顶级工厂，定义从容器中获取bean的BeanFactory#getBean(String name)方法</p><p>SingletonBeanRegistry：单例bean接口，定义从从容器中获取单例bean对象的SingletonBeanRegistry#getSingleton(String beanName)方法。</p><p>BeanDefinitionRegistry：beanDefinition定义注册接口，定义向容器中注册bean定义的方法BeanDefinitionRegistry#registerBeanDefinition(），实现向容器中注册类信息。</p><p>从以上定义的接口可以看到，每个接口定义的功能很原子性，功能明确，提供很少的方法，然后让抽象类和子具体类通过继承，实现的方法在接口的功能上做扩展操作，所以说这种设计很值得我们学习。</p><h3 id="_3-2、抽象类定义模板方法abstractbeanfactory" tabindex="-1"><a class="header-anchor" href="#_3-2、抽象类定义模板方法abstractbeanfactory"><span>3.2、抽象类定义模板方法AbstractBeanFactory</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AbstractBeanFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DefaultSingletonBeanRegistry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //获取容器中bean的方法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bean;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //获取bean的定义信息，然后根据bean定义创建bean对象</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinition</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name, beanDefinition);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeanDefinition</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">BeanDefinition</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AbstractBeanFactory实现了BeanFactory工厂接口，重写getBean方法，首先去容器中获取bean对象，如果获取不到bean对象，就去获取bean的定义信息然后创建新的bean对象，获取bean定义和根据bean定义创建对象被声明为两个受保护的方法，由继承其子类的方法自己实现。可以看到，在这个类中只是定义了创建bean对象的方法，类本身并没有做实现，而是由具体的子类去实现。</p><p>AbstractBeanFactory接口还继承了默认的单例实现类DefaultSingletonBeanRegistry，因此也就具备了单例注册类方法。</p><h3 id="_3-3、创建bean对象的抽象类abstractautowirecapablebeanfactory" tabindex="-1"><a class="header-anchor" href="#_3-3、创建bean对象的抽象类abstractautowirecapablebeanfactory"><span>3.3、创建Bean对象的抽象类AbstractAutowireCapableBeanFactory</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AbstractAutowireCapableBeanFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AbstractBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">BeanDefinition</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            bean </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> beanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBeanClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">InstantiationException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">IllegalAccessException</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Instantiation of bean failed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, e);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        addSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beanName, bean);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> bean;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心类，在AbstractAutowireCapableBeanFactory抽象类中实现了对象的实例化操作，通过bean对象的定义信息newInstance一个新的对象然后放到容器中。</p><p>创建好bean对象后，放到单例对象的缓存中。为什么此类可以喜爱那个单例容器中存放bean对象，因为其实现了AbstractBeanFactory抽象类，而父抽象类继承单例接口的默认实现，因此具备从单例容器中获取和添加bean对象的功能。</p><h3 id="_3-3、核心实现类defaultlistablebeanfactory" tabindex="-1"><a class="header-anchor" href="#_3-3、核心实现类defaultlistablebeanfactory"><span>3.3、核心实现类DefaultListableBeanFactory</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DefaultListableBeanFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> AbstractAutowireCapableBeanFactory</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> BeanDefinitionRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinitionMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">BeanDefinition</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        beanDefinitionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beanName, beanDefinition);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeanDefinition</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinition</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> beanDefinitionMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beanName);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (beanDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeansException</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;No bean named &#39;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> beanName </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&#39; is defined&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> beanDefinition;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心实现类DefaultListableBeanFactory实现了BeanDefinitionRegistry接口并且继承AbstractAutowireCapableBeanFactory抽象类；</p><p>通过继承AbstractAutowireCapableBeanFactory类实现getBeanDefinition获取bean定义的方法。</p><p>通过实现BeanDefinitionRegistry接口实现注册bean定义功能。</p><p>因此在DefaultListableBeanFactory一个类里面就实现了注册Bean定义和获取Bean定义的功能。</p><h3 id="_3-4、单例接口-singletonbeanregistry" tabindex="-1"><a class="header-anchor" href="#_3-4、单例接口-singletonbeanregistry"><span>3.4、单例接口：SingletonBeanRegistry</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SingletonBeanRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单例接口主要功能是定义一个从容器中获取单例bean对象的接口。</p><h3 id="_3-5、单例接口实现类-defaultsingletonbeanregistry" tabindex="-1"><a class="header-anchor" href="#_3-5、单例接口实现类-defaultsingletonbeanregistry"><span>3.5、单例接口实现类：DefaultSingletonBeanRegistry</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DefaultSingletonBeanRegistry</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> SingletonBeanRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> singletonObjects </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> singletonObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beanName);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> addSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> beanName</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> singletonObject</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        singletonObjects</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(beanName, singletonObject);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DefaultSingletonBeanRegistry是单例接口的默认实现类，主要重写getSingleton()方法获取单例bean对象，同时实现了自己的受保护的addSingleton方法，主要负责向容器中添加对象操作。</p><h2 id="_4、测试" tabindex="-1"><a class="header-anchor" href="#_4、测试"><span>4、测试</span></a></h2><h3 id="_4-1、测试用例" tabindex="-1"><a class="header-anchor" href="#_4-1、测试用例"><span>4.1、测试用例</span></a></h3><p><strong>Service对象</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> queryUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;查询用户信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、测试结果" tabindex="-1"><a class="header-anchor" href="#_4-2、测试结果"><span>4.2、测试结果</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Test</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> testBeanDefine</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(){</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 1.初始化 BeanFactory</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        DefaultListableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DefaultListableBeanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 2.注册 bean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> beanDefinition </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> BeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">registerBeanDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;peopleService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, beanDefinition);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 3.第一次获取 bean</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> peopleService1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (PeopleService) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;peopleService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        peopleService1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">queryUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 4.第二次获取 bean from Singleton</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        PeopleService</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> peopleService2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (PeopleService) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">beanFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getBean</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;peopleService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        peopleService2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">queryUserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结果：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">查询用户信息</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">查询用户信息</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Process</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> finished with exit code </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单测中，还是遵循实例化BeanFactory，注册BeanDefiniton定义，获取bean对象使用等三步，但是在第二步中注册bean定义的过程中，可以看到注册的是bean的class信息，而不是实例化对象，因此本章节为止实现了将bean的创建交给了容器，另外两次从容器中获取bean对象，获取的是同一个bean对象，因此也实现了单例bean的功能。</p><h2 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结"><span>5、总结</span></a></h2><p><strong>AbstractBeanFactory抽象类使用模板设计模式，实现接口中的一部分方法，让子类去实现属于自己的方法，抽象类中只定义调用过程，而没有做具体的实现，实现留给子类。</strong></p><p><strong>面向接口编程，一个接口只做一件事，定义简单的接口，然后让子接口，抽象类和具体类通过实现和继承的方法对接口功能进行扩展：</strong></p><ul><li><strong>接口继承接口，实现对接口的功能扩展，方法扩展</strong></li><li><strong>抽象类实现接口，一般是定义业务的调用过程，不会做具体的实现</strong></li><li><strong>抽象类继承抽象类，一般是对抽象类功能的扩充，或者某一个抽象类需要具备其他功能，就可以通过继承其他抽象类实现</strong></li><li><strong>具体类实现接口或者继承抽象类，一般做具体的方法实现，配合接口或者父类引用的调用关系。</strong></li></ul><p>在 Spring Bean 容器的实现类中要重点关注<strong><strong>类之间的职责和关系</strong></strong>，几乎所有的程序功能设计都离不开接口、抽象类、实现、继承，而这些不同特性类的使用就可以非常好的隔离开类的功能职责和作用范围。而这样的知识点也是在学习手写 Spring Bean 容器框架过程非常重要的知识。</p>',59)],t={},l=(0,a(6262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,e)}]]),h=JSON.parse('{"path":"/frameDesignAndSourceCode/springSourceCode/act_two-springBeanDefineAndRegister.html","title":"2、SpringBean定义","lang":"zh-CN","frontmatter":{"title":"2、SpringBean定义","icon":"file","order":2,"author":"bugcode","date":"2020-01-01T00:00:00.000Z","category":["Spring","SpringFrameWork","JAVA"],"tag":["后端","JAVA","Spring"],"sticky":false,"star":true,"footer":"Spring基础","copyright":"bugcode","description":"2、SpringBean定义 1、目标 在第一章节，已经实现类一个简易的spring容器模型，容器模型提供了bean对象的注册和从容器中获取bean的功能，但是实现中还存在两点缺陷： bean的定义信息，只是用一个object代替了bean的定义，实际使用的时候，还需要new一个对象传入bean的定义中，所以bean的创建操作并没有交给容器，因此本章我...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/frameDesignAndSourceCode/springSourceCode/act_two-springBeanDefineAndRegister.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"2、SpringBean定义"}],["meta",{"property":"og:description","content":"2、SpringBean定义 1、目标 在第一章节，已经实现类一个简易的spring容器模型，容器模型提供了bean对象的注册和从容器中获取bean的功能，但是实现中还存在两点缺陷： bean的定义信息，只是用一个object代替了bean的定义，实际使用的时候，还需要new一个对象传入bean的定义中，所以bean的创建操作并没有交给容器，因此本章我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/act_two_design.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-21T06:33:59.000Z"}],["meta",{"property":"article:author","content":"bugcode"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"JAVA"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-21T06:33:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2、SpringBean定义\\",\\"image\\":[\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/act_two_design.webp\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/act_two_class.webp\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-21T06:33:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bugcode\\"}]}"]]},"headers":[{"level":2,"title":"1、目标","slug":"_1、目标","link":"#_1、目标","children":[]},{"level":2,"title":"2、设计","slug":"_2、设计","link":"#_2、设计","children":[]},{"level":2,"title":"3、实现","slug":"_3、实现","link":"#_3、实现","children":[{"level":3,"title":"3.1、核心类图","slug":"_3-1、核心类图","link":"#_3-1、核心类图","children":[]},{"level":3,"title":"3.2、抽象类定义模板方法AbstractBeanFactory","slug":"_3-2、抽象类定义模板方法abstractbeanfactory","link":"#_3-2、抽象类定义模板方法abstractbeanfactory","children":[]},{"level":3,"title":"3.3、创建Bean对象的抽象类AbstractAutowireCapableBeanFactory","slug":"_3-3、创建bean对象的抽象类abstractautowirecapablebeanfactory","link":"#_3-3、创建bean对象的抽象类abstractautowirecapablebeanfactory","children":[]},{"level":3,"title":"3.3、核心实现类DefaultListableBeanFactory","slug":"_3-3、核心实现类defaultlistablebeanfactory","link":"#_3-3、核心实现类defaultlistablebeanfactory","children":[]},{"level":3,"title":"3.4、单例接口：SingletonBeanRegistry","slug":"_3-4、单例接口-singletonbeanregistry","link":"#_3-4、单例接口-singletonbeanregistry","children":[]},{"level":3,"title":"3.5、单例接口实现类：DefaultSingletonBeanRegistry","slug":"_3-5、单例接口实现类-defaultsingletonbeanregistry","link":"#_3-5、单例接口实现类-defaultsingletonbeanregistry","children":[]}]},{"level":2,"title":"4、测试","slug":"_4、测试","link":"#_4、测试","children":[{"level":3,"title":"4.1、测试用例","slug":"_4-1、测试用例","link":"#_4-1、测试用例","children":[]},{"level":3,"title":"4.2、测试结果","slug":"_4-2、测试结果","link":"#_4-2、测试结果","children":[]}]},{"level":2,"title":"5、总结","slug":"_5、总结","link":"#_5、总结","children":[]}],"git":{"createdTime":1717338253000,"updatedTime":1718951639000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":3}]},"readingTime":{"minutes":9.44,"words":2833},"filePathRelative":"frameDesignAndSourceCode/springSourceCode/act_two-springBeanDefineAndRegister.md","localizedDate":"2020年1月1日","excerpt":"\\n<h2>1、目标</h2>\\n<p>在第一章节，已经实现类一个简易的spring容器模型，容器模型提供了bean对象的注册和从容器中获取bean的功能，但是实现中还存在两点缺陷：</p>\\n<ol>\\n<li>bean的定义信息，只是用一个object代替了bean的定义，实际使用的时候，还需要new一个对象传入bean的定义中，所以bean的创建操作并没有交给容器，因此本章我们目标将bean对象的创建移交给容器。</li>\\n<li>多次获取同一个bean对象，应该从缓存中获取，不应该在重新创建一个对象。</li>\\n</ol>\\n<h2>2、设计</h2>\\n<p>第一章节中，类型的注册，其实是一个Object对象，是直接将创建好的对象注册到Map中，需要的时候直接获取已经创建好的bean，本章需要将对象的创建移交给容器，因此就需要修改BeanDefinition定义，在注册阶段，只注册bean的类型信息，当获取bean没有的时候，spring容器根据bean class信息创建对象并且放到容器中，因此首先要做的就是修改BeanDefinition里面的Object为Class类型信息。</p>","autoDesc":true}')}}]);