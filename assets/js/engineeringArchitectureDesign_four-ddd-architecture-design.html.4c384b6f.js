"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1271],{6262:(e,i)=>{i.A=(e,i)=>{const t=e.__vccOpts||e;for(const[e,a]of i)t[e]=a;return t}},8037:(e,i,t)=>{t.r(i),t.d(i,{comp:()=>c,data:()=>o});var a=t(641);const n=[(0,a.Fv)('<h1 id="四、ddd架构设计" tabindex="-1"><a class="header-anchor" href="#四、ddd架构设计"><span>四、DDD架构设计</span></a></h1><h2 id="mvc-vs-ddd" tabindex="-1"><a class="header-anchor" href="#mvc-vs-ddd"><span>mvc vs DDD</span></a></h2><p>简单、容易、好理解，是 MVC 架构的特点，但也正因为简单的分层逻辑，在适配较复杂的场景并且需要长周期的维护时，代码的迭代成本就会越来越高。如图；</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/15f20f9a.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>如果你接触过较大型且已经长期维护项目的 MVC 架构，你就会发现这里的 DAO、PO、VO 对象，在 Service 层相互调用。那么长期开发后，就导致了各个 PO 里的属性字段数量都被撑的特别大。这样的开发方式，将”状态”、“行为“分离到不同的对象中，代码的意图渐渐模糊，膨胀、臃肿和不稳定的架构，让迭代成本增加。</li><li>而 DDD 架构首先以解决此类问题为主，将各个属于自己领域范围内的行为和逻辑封装到自己的领域包下处理。这也是 DDD 架构设计的精髓之一。它希望在分治层面合理切割问题空间为更小规模的若干子问题，而问题越小就容易被理解和处理，做到高内聚低耦合。这也是康威定律所提到的，解决复杂场景的设计主要分为：分治、抽象和知识。</li></ul><h2 id="简化" tabindex="-1"><a class="header-anchor" href="#简化"><span>简化</span></a></h2><p>在给大家讲解 MVC 架构的时候，小傅哥提到了一个简单的开发模型。开发代码可以理解为：“定义属性 -&gt; 创建方法 -&gt; 调用展示”但这个模型结构过于简单，不太适合运用了各类分布式技术栈以及更多逻辑的 DDD 架构。所以在 DDD 这里，我们把开发代码可以抽象为：“触发 -&gt; 函数 -&gt; 连接” 如图；<br><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/57284460.png" alt="" loading="lazy"></p><ul><li>DDD 架构常用于微服务场景，因此也一个系统的调用方式就不只是 HTTP 还包括；RPC 远程、MQ 消息、TASK 任务，因此这些种方式都可以理解为触发。</li><li>通过触发调用函数方法，我们这里可以把各个服务都当成一个函数方法来看。而函数方法通过连接，调用到其他的接口、数据库、缓存来完成函数逻辑。</li></ul><p>接下来，小傅哥在带着大家把这些所需的模块，拆分到对应的DDD系统架构中。</p><h2 id="架构分层" tabindex="-1"><a class="header-anchor" href="#架构分层"><span>架构分层</span></a></h2><p>如下是 DDD 架构的一种分层结构，也可以有其他种方式，核心的重点在于适合你所在场景的业务开发。以下的分层结构，是在使用 DDD 架构多种的方式开发代码后，做了简化和处理的。右侧的连线是各个模块的依赖关系。接下来就给大家做一下模块的介绍。</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/31877aac.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>接口定义 - xfg-frame-api：因为微服务中引用的 RPC 需要对外提供接口的描述信息，也就是调用方在使用的时候，需要引入 Jar 包，让调用方好能依赖接口的定义做代理。</li><li>应用封装 - xfg-frame-app：这是应用启动和配置的一层，如一些 aop 切面或者 config 配置，以及打包镜像都是在这一层处理。你可以把它理解为专门为了启动服务而存在的。</li><li>领域封装 - xfg-frame-domain：领域模型服务，是一个非常重要的模块。无论怎么做DDD的分层架构，domain 都是肯定存在的。在一层中会有一个个细分的领域服务，在每个服务包中会有【模型、仓库、服务】这样3部分。</li><li>仓储服务 - xfg-frame-infrastructure：基础层依赖于 domain 领域层，因为在 domain 层定义了仓储接口需要在基础层实现。这是依赖倒置的一种设计方式。</li><li>领域封装 - xfg-frame-trigger：触发器层，一般也被叫做 adapter 适配器层。用于提供接口实现、消息接收、任务执行等。所以对于这样的操作，把它叫做触发器层。</li><li>类型定义 - xfg-frame-types：通用类型定义层，在我们的系统开发中，会有很多类型的定义，包括；基本的 Response、Constants 和枚举。它会被其他的层进行引用使用。</li><li>领域编排【可选】 - xfg-frame-case：领域编排层，一般对于较大且复杂的的项目，为了更好的防腐和提供通用的服务，一般会添加 case/application 层，用于对 domain 领域的逻辑进行封装组合处理。</li></ul><h2 id="领域分层" tabindex="-1"><a class="header-anchor" href="#领域分层"><span>领域分层</span></a></h2><p>DDD 领域驱动设计的中心，主要在于领域模型的设计，以领域所需驱动功能实现和数据建模。一个领域服务下面会有多个领域模型，每个领域模型都是一个充血结构。一个领域模型 = 一个充血结构</p><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/ae96656e.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>model 模型对象；</p><ul><li>aggreate：聚合对象，实体对象、值对象的协同组织，就是聚合对象。</li><li>entity：实体对象，大多数情况下，实体对象(Entity)与数据库持久化对象(PO)是1v1的关系，但也有为了封装一些属性信息，会出现1vn的关系。</li><li>valobj：值对象，通过对象属性值来识别的对象 By 《实现领域驱动设计》</li></ul></li><li><p>repository 仓储服务；从数据库等数据源中获取数据，传递的对象可以是聚合对象、实体对象，返回的结果可以是；实体对象、值对象。因为仓储服务是由基础层(infrastructure) 引用领域层(domain)，是一种依赖倒置的结构，但它可以天然的隔离PO数据库持久化对象被引用。</p></li><li><p>service 服务设计；这里要注意，不要以为定义了聚合对象，就把超越1个对象以外的逻辑，都封装到聚合中，这会让你的代码后期越来越难维护。聚合更应该注重的是和本对象相关的单一简单封装场景，而把一些重核心业务方到 service 里实现。此外；如果你的设计模式应用不佳，那么无论是领域驱动设计、测试驱动设计还是换了三层和四层架构，你的工程质量依然会非常差。</p></li><li><p>对象解释</p><ul><li>DTO 数据传输对象 (data transfer object)，DAO与业务对象或数据访问对象的区别是：DTO的数据的变异子与访问子（mutator和accessor）、语法分析（parser）、序列化（serializer）时不会有任何存储、获取、序列化和反序列化的异常。即DTO是简单对象，不含任何业务逻辑，但可包含序列化和反序列化以用于传输数据。</li></ul></li></ul><p><strong>领域补充</strong></p><blockquote><p>一个领域模型中包含3个部分；model、repository、service 三部分；</p><ul><li>model 对象的定义 【含有；valobj = VO、entity、Aggregate】</li><li>repository 仓储的定义【含有PO】</li><li>service 服务实现</li></ul></blockquote><p>以上3个模块，一般也是大家在使用 DDD 时候最不容易理解的分层。比如 model 里还分为；valobj - 值对象、entity 实体对象、aggregates 聚合对象；</p><ul><li>值对象：表示没有唯一标识的业务实体，例如商品的名称、描述、价格等。</li><li>实体对象：表示具有唯一标识的业务实体，例如订单、商品、用户等；</li><li>聚合对象：是一组相关的实体对象的根，用于保证实体对象之间的一致性和完整性；</li></ul><p>关于model中各个对象的拆分，尤其是聚合的定义，会牵引着整个模型的设计。当然你可以在初期使用 DDD 的时候不用过分在意领域模型的设计，可以把整个 domain 下的一个个包当做充血模型结构，这样编写出来的代码也是非常适合维护的。</p>',22)],l={},c=(0,t(6262).A)(l,[["render",function(e,i){return(0,a.uX)(),(0,a.CE)("div",null,n)}]]),o=JSON.parse('{"path":"/engineeringArchitectureDesign/four-ddd-architecture-design.html","title":"四、工程架构","lang":"zh-CN","frontmatter":{"title":"四、工程架构","icon":"file","order":4,"author":"bugcode","date":"2020-01-01T00:00:00.000Z","category":["DDD","架构设计"],"tag":["ddd","架构"],"sticky":false,"star":true,"footer":"分布式","copyright":"bugcode","description":"四、DDD架构设计 mvc vs DDD 简单、容易、好理解，是 MVC 架构的特点，但也正因为简单的分层逻辑，在适配较复杂的场景并且需要长周期的维护时，代码的迭代成本就会越来越高。如图； 如果你接触过较大型且已经长期维护项目的 MVC 架构，你就会发现这里的 DAO、PO、VO 对象，在 Service 层相互调用。那么长期开发后，就导致了各个 PO...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/engineeringArchitectureDesign/four-ddd-architecture-design.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"四、工程架构"}],["meta",{"property":"og:description","content":"四、DDD架构设计 mvc vs DDD 简单、容易、好理解，是 MVC 架构的特点，但也正因为简单的分层逻辑，在适配较复杂的场景并且需要长周期的维护时，代码的迭代成本就会越来越高。如图； 如果你接触过较大型且已经长期维护项目的 MVC 架构，你就会发现这里的 DAO、PO、VO 对象，在 Service 层相互调用。那么长期开发后，就导致了各个 PO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/15f20f9a.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-23T03:00:53.000Z"}],["meta",{"property":"article:author","content":"bugcode"}],["meta",{"property":"article:tag","content":"ddd"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:published_time","content":"2020-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-23T03:00:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"四、工程架构\\",\\"image\\":[\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/15f20f9a.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/57284460.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/31877aac.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/ae96656e.png\\"],\\"datePublished\\":\\"2020-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-23T03:00:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bugcode\\"}]}"]]},"headers":[{"level":2,"title":"mvc vs DDD","slug":"mvc-vs-ddd","link":"#mvc-vs-ddd","children":[]},{"level":2,"title":"简化","slug":"简化","link":"#简化","children":[]},{"level":2,"title":"架构分层","slug":"架构分层","link":"#架构分层","children":[]},{"level":2,"title":"领域分层","slug":"领域分层","link":"#领域分层","children":[]}],"git":{"createdTime":1729652453000,"updatedTime":1729652453000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":1}]},"readingTime":{"minutes":7.03,"words":2110},"filePathRelative":"engineeringArchitectureDesign/four-ddd-architecture-design.md","localizedDate":"2020年1月1日","excerpt":"\\n<h2>mvc vs DDD</h2>\\n<p>简单、容易、好理解，是 MVC 架构的特点，但也正因为简单的分层逻辑，在适配较复杂的场景并且需要长周期的维护时，代码的迭代成本就会越来越高。如图；</p>\\n<figure><img src=\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/15f20f9a.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<ul>\\n<li>如果你接触过较大型且已经长期维护项目的 MVC 架构，你就会发现这里的 DAO、PO、VO 对象，在 Service 层相互调用。那么长期开发后，就导致了各个 PO 里的属性字段数量都被撑的特别大。这样的开发方式，将”状态”、“行为“分离到不同的对象中，代码的意图渐渐模糊，膨胀、臃肿和不稳定的架构，让迭代成本增加。</li>\\n<li>而 DDD 架构首先以解决此类问题为主，将各个属于自己领域范围内的行为和逻辑封装到自己的领域包下处理。这也是 DDD 架构设计的精髓之一。它希望在分治层面合理切割问题空间为更小规模的若干子问题，而问题越小就容易被理解和处理，做到高内聚低耦合。这也是康威定律所提到的，解决复杂场景的设计主要分为：分治、抽象和知识。</li>\\n</ul>","autoDesc":true}')}}]);