"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7988],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},8940:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>h});var n=a(641);const l=[(0,n.Fv)('<h1 id="_1、模板设计模式介绍" tabindex="-1"><a class="header-anchor" href="#_1、模板设计模式介绍"><span>1、模板设计模式介绍</span></a></h1><h2 id="_1-1、什么是模板模式" tabindex="-1"><a class="header-anchor" href="#_1-1、什么是模板模式"><span>1.1、什么是模板模式</span></a></h2><p>模板模式是一种基于继承实现的设计模式，它是行为型的模式。</p><p>主要思想是<strong>将定义的算法抽象成一组步骤，在抽象类种定义算法的骨架，把具体的操作留给子类来实现</strong>。</p><p>通俗地说，模板模式就是将某一行为制定一个框架，然后子类填充细节。比如说做菜，流程通常就是洗菜、切菜、炒菜等步骤，那么这个流程就可以看作是一个模板，而具体做什么菜由子类来实现。</p><p>最重要一点：抽象方法中定义调用过程，定义业务过程，然后子类实现具体的业务方法。</p><h2 id="_1-2、主要解决问题" tabindex="-1"><a class="header-anchor" href="#_1-2、主要解决问题"><span>1.2、主要解决问题</span></a></h2><p>解决在多个子类中重复实现相同的方法的问题，通过将通用方法抽象到父类中来避免代码重复，子类实现属于自己的方法。</p><p>在父类中做具体的调用过程规划，子类实现相应的具体方法，可以抽象类继承抽象类，具体类继承抽象类，每一层都实现属于自己的方法，一个类不应该实现太多的功能，应该将不同的方法分散到不同的子类中去实现。</p><h2 id="_1-4、实现方式" tabindex="-1"><a class="header-anchor" href="#_1-4、实现方式"><span>1.4、实现方式</span></a></h2><ul><li><strong>定义抽象父类</strong>：包含模板方法和一些抽象方法或具体方法。</li><li><strong>实现子类</strong>：继承抽象父类并实现抽象方法，不改变算法结构。</li></ul><h2 id="_1-5、关键代码" tabindex="-1"><a class="header-anchor" href="#_1-5、关键代码"><span>1.5、关键代码</span></a></h2><ul><li><strong>模板方法</strong>：在抽象父类中定义，调用抽象方法和具体方法。</li><li><strong>抽象方法</strong>：由子类实现，代表算法的可变部分。</li><li><strong>具体方法</strong>：在抽象父类中实现，代表算法的不变部分。</li></ul><h2 id="_1-6、使用建议" tabindex="-1"><a class="header-anchor" href="#_1-6、使用建议"><span>1.6、使用建议</span></a></h2><ul><li>当有多个子类共有的方法且逻辑相同时，考虑使用模板方法模式。</li><li>对于重要或复杂的方法，可以考虑作为模板方法定义在父类中。</li></ul><h1 id="_2、角色组成" tabindex="-1"><a class="header-anchor" href="#_2、角色组成"><span>2、角色组成</span></a></h1><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451990.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>抽象类（Abstract）：定义了算法骨架，包含一个或多个抽象方法，这些方法由子类来具体实现。<strong>抽象类中通常还包含一个模板方法，用来调用抽象方法和具体方法，控制算法的执行顺序；还可以定义钩子方法，用于在算法中进行条件控制。</strong></li><li><strong>一般情况下模板方法被设计为final方法，不允许子类继承和重写。</strong></li><li>具体类（Concrete Class）：继承抽象类，实现具体的抽象方法，父类在模板方法中做调用。</li><li>模板方法，模板方法一般声明为final，防止恶意重写，修改调用逻辑。</li></ul><h1 id="_3、优缺点" tabindex="-1"><a class="header-anchor" href="#_3、优缺点"><span>3、优缺点</span></a></h1><p><strong>优点：</strong></p><ul><li>提高代码复用性：将算法的骨架定义在父类中，子类只需要实现具体的细节部分，减少了代码的重复<strong>提取公共代码</strong>：减少代码重复，便于维护。</li><li>符合开闭原则：在模板模式种，由父类控制子类的执行，通过子类对父类进行扩展增加新的行为，符合“开闭原则”。</li><li>提高代码可维护性：模板模式定义了一套固定的模板，便于开发人员理解和修改，易于维护。</li><li><strong>封装不变部分</strong>：算法的不变部分被封装在父类中。</li><li><strong>扩展可变部分</strong>：子类可以扩展或修改算法的可变部分。</li></ul><p><strong>缺点：</strong></p><ul><li><p>部分子类可能无法灵活定制：由于模板模式制定的是一个固定的结构，所以某些子类可能无法适用，导致无法实现特定的需求或定制。</p></li><li><p>类的数量增加：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p></li><li><p><strong>类数目增加</strong>：每个不同的实现都需要一个子类，可能导致系统庞大。</p></li><li><p>多个抽象类和具体类相互继承，可读性差，调用关系复杂。</p></li></ul><h1 id="_4、应用场景" tabindex="-1"><a class="header-anchor" href="#_4、应用场景"><span>4、应用场景</span></a></h1><h2 id="_4-1、生活场景" tabindex="-1"><a class="header-anchor" href="#_4-1、生活场景"><span>4.1、生活场景</span></a></h2><ul><li>写文章：假设我们要写一篇文章，其中包括标题、引言、正文和结论等部分。我们可以将文章的写作过程定义为一个模板，在抽象类中定义写作方法，如先写标题、再写引言、接着写正文，最后写结论。具体类就是每篇文章的实现类，它们可以根据主题和内容的不同来实现对应的部分。这样，每个具体文章类只需要关注自己特定的内容，而写作的步骤则由模板来制</li><li>学习流程：比如学习某门课程的流程，在学习过程中有一些共同的步骤，比如预习、上课、复习做练习等。我们可以定义一个抽象类StudyCourse，在其中定义学习的方法。具体类就是每门具体课程的实现类，它们根据课程内容和学习方式来实现抽象类中的方法。模板方法则是定义在抽象类中的一组方法，用于规定学习的整体流程和一些基本规则。</li><li>当存在一些通用的方法，可以在多个子类中共用时。</li><li>当某一个业务过程需要多个步骤才能实现，那么就可以在抽象类中定义具体的业务调用过程，子类中实现具体的方法。</li></ul><h2 id="_4-2-、java场景" tabindex="-1"><a class="header-anchor" href="#_4-2-、java场景"><span>4.2 、java场景</span></a></h2><ul><li>JdbcTemplate：JdbcTemplate提供了一系列的模板方法，如execute、query、update等。开发者可以通过继承JdbcTemplate并实现相应的抽象方法来完成数据库操作的具体实现。</li><li>HttpServlet：HttpServlet类是一个抽象类，提供了handleRequest、doGet、doPost等模板方法，用于处理HTTP请求。Servlet开发者可以继承HttpServlet并实现这些方法来处理具体的请求，从而完成一个特定的Servlet实现。</li><li>Servlet过滤器：Java Servlet API中提供了过滤器（Filter）接口，用于对Servlet请求进行拦截和处理。该接口中定义了一个doFilter()方法，该方法是一个模板方法，由子类实现具体的请求拦截和处理方式。</li></ul><h1 id="_5、代码实现" tabindex="-1"><a class="header-anchor" href="#_5、代码实现"><span>5、代码实现</span></a></h1><p>下面以订外卖为例，解释一下模板模式。</p><p>假设订外卖的过程包含三个步骤：选择外卖、支付、取外卖、是否打赏，我们可以定义一个OderFood的抽象类，那么选择外卖就可以是抽象方法，需要子类取实现它，支付和取外卖可以定义为具体方法，另外是否打赏为钩子方法，子类可以决定是否对算法的不同进行挂钩，还需要定义一个模板方法，用以控制流程；不同的商家，如KFC、星巴克就是具体类。</p><h2 id="_5-1、uml类图" tabindex="-1"><a class="header-anchor" href="#_5-1、uml类图"><span>5.1、UML类图</span></a></h2><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451310.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_5-2、orderfood——抽象类-abstract" tabindex="-1"><a class="header-anchor" href="#_5-2、orderfood——抽象类-abstract"><span>5.2、OrderFood——抽象类（Abstract）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 1.抽象类（Abstract Class）：点外卖</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 包含选择外卖、支付、取外卖三个方法，</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 其中选择外卖为抽象方法，需要子类实现</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 支付、取外卖为具体方法</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 另外是否打赏为钩子方法，子类可以决定是否对算法的不同进行挂钩</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //模板方法</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        selectFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">        getFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //选择外卖   抽象方法 由子类实现具体细节</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> selectFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //是否打赏   钩子方法 可以重写来做条件控制</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isGiveAward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //-------具体方法----------</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">          System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;支付成功，外卖小哥正在快马加鞭~~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //取外卖</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;取到外卖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">isGiveAward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()){</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;打赏外卖小哥&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3、具体类-concrete-class" tabindex="-1"><a class="header-anchor" href="#_5-3、具体类-concrete-class"><span>5.3、具体类（Concrete Class）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 具体类（Concrete Class）：星巴克</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Starbucks</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //实现父类方法</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> selectFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;一杯抹茶拿铁&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //重写钩子方法，打赏外卖小哥</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isGiveAward</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 具体类（Concrete Class）：KFC</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> KFC</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> OrderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> selectFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;一份汉堡炸鸡四件套&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4、testtemplate" tabindex="-1"><a class="header-anchor" href="#_5-4、testtemplate"><span>5.4、testTemplate</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> * 模板模式测试类</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">SpringBootTest</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TestTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Test</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> testTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //星巴克（重写了钩子方法，打赏外卖小哥）</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        OrderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> orderFood</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Starbucks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        orderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;--------KFC------------&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        //KFC</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        OrderFood</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> orderFood1</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> KFC</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        orderFood1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">order</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451445.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结"><span>6、总结</span></a></h1><p>我们可以把模板看作是一个公共的蓝本，而子类就像是根据这个蓝本来实现自己独特的需求。所以当我们在开发中遇到一些情况，比如多个类共享一些相同的操作，或者说想要控制子类扩展某个算法的一部分功能时，就可以考虑模板模式了。另外，还有以下几个适用场景以做参考：</p><ol><li>子类需要扩展算法的部分功能：当需要控制子类对算法的某些步骤进行扩展或修改，同时保持算法骨架不变时，可以使用模板模式。</li><li>实现多个算法的不同细节：当需要在不同的场景下使用相同的算法，但是细节实现不同，可以使用模板模式。</li><li>需要统一流程的业务：在一些对流程敏感的业务中，例如订餐、下单等，使用模板方法模式可以统一流程，使代码更加简洁和易维护。并且在统一流程的同时，也能保证业务的正确性。</li></ol><p><strong>注意事项：</strong> 为防止恶意操作，一般模板方法都加上 final 关键词。</p>',44)],e={},t=(0,a(6262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),h=JSON.parse('{"path":"/designpattern/Behavior/act_one_templatePattern.html","title":"1、模板设计模式","lang":"zh-CN","frontmatter":{"title":"1、模板设计模式","icon":"file","order":1,"author":"bugcode","date":"2023-01-01T00:00:00.000Z","category":["DESIGN PATTERN","JAVA","设计模式"],"tag":["后端","java","模板"],"sticky":false,"star":true,"footer":"java基础","copyright":"bugcode","description":"1、模板设计模式介绍 1.1、什么是模板模式 模板模式是一种基于继承实现的设计模式，它是行为型的模式。 主要思想是将定义的算法抽象成一组步骤，在抽象类种定义算法的骨架，把具体的操作留给子类来实现。 通俗地说，模板模式就是将某一行为制定一个框架，然后子类填充细节。比如说做菜，流程通常就是洗菜、切菜、炒菜等步骤，那么这个流程就可以看作是一个模板，而具体做什...","head":[["meta",{"property":"og:url","content":"https://www.bugcode.online/designpattern/Behavior/act_one_templatePattern.html"}],["meta",{"property":"og:site_name","content":"bugcode 的架构之路"}],["meta",{"property":"og:title","content":"1、模板设计模式"}],["meta",{"property":"og:description","content":"1、模板设计模式介绍 1.1、什么是模板模式 模板模式是一种基于继承实现的设计模式，它是行为型的模式。 主要思想是将定义的算法抽象成一组步骤，在抽象类种定义算法的骨架，把具体的操作留给子类来实现。 通俗地说，模板模式就是将某一行为制定一个框架，然后子类填充细节。比如说做菜，流程通常就是洗菜、切菜、炒菜等步骤，那么这个流程就可以看作是一个模板，而具体做什..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451990.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-13T06:53:32.000Z"}],["meta",{"property":"article:author","content":"bugcode"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"模板"}],["meta",{"property":"article:published_time","content":"2023-01-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-13T06:53:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"1、模板设计模式\\",\\"image\\":[\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451990.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451310.png\\",\\"https://vscodepic.oss-cn-beijing.aliyuncs.com/blog/202407131451445.png\\"],\\"datePublished\\":\\"2023-01-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-07-13T06:53:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"bugcode\\"}]}"]]},"headers":[{"level":2,"title":"1.1、什么是模板模式","slug":"_1-1、什么是模板模式","link":"#_1-1、什么是模板模式","children":[]},{"level":2,"title":"1.2、主要解决问题","slug":"_1-2、主要解决问题","link":"#_1-2、主要解决问题","children":[]},{"level":2,"title":"1.4、实现方式","slug":"_1-4、实现方式","link":"#_1-4、实现方式","children":[]},{"level":2,"title":"1.5、关键代码","slug":"_1-5、关键代码","link":"#_1-5、关键代码","children":[]},{"level":2,"title":"1.6、使用建议","slug":"_1-6、使用建议","link":"#_1-6、使用建议","children":[]},{"level":2,"title":"4.1、生活场景","slug":"_4-1、生活场景","link":"#_4-1、生活场景","children":[]},{"level":2,"title":"4.2 、java场景","slug":"_4-2-、java场景","link":"#_4-2-、java场景","children":[]},{"level":2,"title":"5.1、UML类图","slug":"_5-1、uml类图","link":"#_5-1、uml类图","children":[]},{"level":2,"title":"5.2、OrderFood——抽象类（Abstract）","slug":"_5-2、orderfood——抽象类-abstract","link":"#_5-2、orderfood——抽象类-abstract","children":[]},{"level":2,"title":"5.3、具体类（Concrete Class）","slug":"_5-3、具体类-concrete-class","link":"#_5-3、具体类-concrete-class","children":[]},{"level":2,"title":"5.4、testTemplate","slug":"_5-4、testtemplate","link":"#_5-4、testtemplate","children":[]}],"git":{"createdTime":1720853612000,"updatedTime":1720853612000,"contributors":[{"name":"不爱打代码的程序员","email":"2284609302@qq.com","commits":1}]},"readingTime":{"minutes":8.53,"words":2560},"filePathRelative":"designpattern/Behavior/act_one_templatePattern.md","localizedDate":"2023年1月1日","excerpt":"\\n<h2>1.1、什么是模板模式</h2>\\n<p>模板模式是一种基于继承实现的设计模式，它是行为型的模式。</p>\\n<p>主要思想是<strong>将定义的算法抽象成一组步骤，在抽象类种定义算法的骨架，把具体的操作留给子类来实现</strong>。</p>\\n<p>通俗地说，模板模式就是将某一行为制定一个框架，然后子类填充细节。比如说做菜，流程通常就是洗菜、切菜、炒菜等步骤，那么这个流程就可以看作是一个模板，而具体做什么菜由子类来实现。</p>\\n<p>最重要一点：抽象方法中定义调用过程，定义业务过程，然后子类实现具体的业务方法。</p>\\n<h2>1.2、主要解决问题</h2>\\n<p>解决在多个子类中重复实现相同的方法的问题，通过将通用方法抽象到父类中来避免代码重复，子类实现属于自己的方法。</p>","autoDesc":true}')}}]);